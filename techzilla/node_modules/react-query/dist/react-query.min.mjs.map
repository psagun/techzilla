{"version":3,"file":"react-query.min.mjs","sources":["../src/utils.js","../src/config.js","../src/queryCache.js","../src/setFocusHandler.js","../src/useIsFetching.js","../src/useMutation.js","../src/useBaseQuery.js","../src/useQuery.js","../src/usePaginatedQuery.js","../src/useInfiniteQuery.js"],"sourcesContent":["import React from 'react'\n\n//\n\nexport const statusIdle = 'idle'\nexport const statusLoading = 'loading'\nexport const statusError = 'error'\nexport const statusSuccess = 'success'\n\nlet _uid = 0\nexport const uid = () => _uid++\nexport const cancelledError = {}\nexport let globalStateListeners = []\nexport const isServer = typeof window === 'undefined'\nexport const noop = () => {}\nexport const identity = d => d\nexport let Console = console || { error: noop, warn: noop, log: noop }\n\nexport function useUid() {\n  const ref = React.useRef(null)\n\n  if (ref.current === null) {\n    ref.current = uid()\n  }\n\n  return ref.current\n}\n\nexport function setConsole(c) {\n  Console = c\n}\n\nexport function useGetLatest(obj) {\n  const ref = React.useRef()\n  ref.current = obj\n\n  return React.useCallback(() => ref.current, [])\n}\n\nexport function functionalUpdate(updater, old) {\n  return typeof updater === 'function' ? updater(old) : updater\n}\n\nexport function stableStringifyReplacer(_, value) {\n  return isObject(value)\n    ? Object.assign(\n        {},\n        ...Object.keys(value)\n          .sort()\n          .map(key => ({\n            [key]: value[key],\n          }))\n      )\n    : value\n}\n\nexport function stableStringify(obj) {\n  return JSON.stringify(obj, stableStringifyReplacer)\n}\n\nexport function isObject(a) {\n  return a && typeof a === 'object' && !Array.isArray(a)\n}\n\nexport function deepIncludes(a, b) {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (typeof a === 'object') {\n    return !Object.keys(b).some(key => !deepIncludes(a[key], b[key]))\n  }\n\n  return false\n}\n\nexport function isDocumentVisible() {\n  return (\n    typeof document === 'undefined' ||\n    document.visibilityState === undefined ||\n    document.visibilityState === 'visible' ||\n    document.visibilityState === 'prerender'\n  )\n}\n\nexport function isOnline() {\n  return navigator.onLine === undefined || navigator.onLine\n}\n\nexport function getQueryArgs(args) {\n  if (isObject(args[0])) {\n    if (\n      args[0].hasOwnProperty('queryKey') &&\n      args[0].hasOwnProperty('queryFn')\n    ) {\n      const { queryKey, variables = [], queryFn, config = {} } = args[0]\n      return [queryKey, variables, queryFn, config]\n    } else {\n      throw new Error('queryKey and queryFn keys are required.')\n    }\n  }\n\n  if (typeof args[2] === 'function') {\n    const [queryKey, variables = [], queryFn, config = {}] = args\n    return [queryKey, variables, queryFn, config]\n  }\n\n  const [queryKey, queryFn, config = {}] = args\n\n  return [queryKey, [], queryFn, config]\n}\n\nexport function useMountedCallback(callback) {\n  const mounted = React.useRef(false)\n  React[isServer ? 'useEffect' : 'useLayoutEffect'](() => {\n    mounted.current = true\n    return () => (mounted.current = false)\n  }, [])\n  return React.useCallback(\n    (...args) => (mounted.current ? callback(...args) : void 0),\n    [callback]\n  )\n}\n\nexport function handleSuspense(queryInfo) {\n  if (queryInfo.config.suspense || queryInfo.config.useErrorBoundary) {\n    if (queryInfo.status === statusError) {\n      setTimeout(() => {\n        queryInfo.query.state.status = 'loading'\n      })\n      throw queryInfo.error\n    }\n  }\n\n  if (queryInfo.config.suspense) {\n    if (queryInfo.status === statusLoading) {\n      queryInfo.query.wasSuspended = true\n      throw queryInfo.refetch()\n    }\n  }\n}\n\n// This deep-equal is directly based on https://github.com/epoberezkin/fast-deep-equal.\n// The parts for comparing any non-JSON-supported values has been removed\nexport function deepEqual(a, b) {\n  if (a === b) return true\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    var length, i, keys\n    if (Array.isArray(a)) {\n      length = a.length\n      // eslint-disable-next-line eqeqeq\n      if (length != b.length) return false\n      for (i = length; i-- !== 0; ) if (!deepEqual(a[i], b[i])) return false\n      return true\n    }\n\n    if (a.valueOf !== Object.prototype.valueOf)\n      return a.valueOf() === b.valueOf()\n\n    keys = Object.keys(a)\n    length = keys.length\n    if (length !== Object.keys(b).length) return false\n\n    for (i = length; i-- !== 0; )\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false\n\n    for (i = length; i-- !== 0; ) {\n      var key = keys[i]\n\n      if (!deepEqual(a[key], b[key])) return false\n    }\n\n    return true\n  }\n\n  // true if both NaN, false otherwise\n  // eslint-disable-next-line no-self-compare\n  return a !== a && b !== b\n}\n","import React from 'react'\nimport { noop, stableStringify, identity, deepEqual } from './utils'\n\nexport const configContext = React.createContext()\n\nconst DEFAULTS = {\n  retry: 3,\n  retryDelay: attemptIndex => Math.min(1000 * 2 ** attemptIndex, 30000),\n  staleTime: 0,\n  cacheTime: 5 * 60 * 1000,\n  refetchAllOnWindowFocus: true,\n  refetchInterval: false,\n  suspense: false,\n  queryKeySerializerFn: defaultQueryKeySerializerFn,\n  queryFnParamsFilter: identity,\n  throwOnError: false,\n  useErrorBoundary: undefined, // this will default to the suspense value\n  onMutate: noop,\n  onSuccess: noop,\n  onError: noop,\n  onSettled: noop,\n  refetchOnMount: true,\n  isDataEqual: deepEqual,\n}\n\nexport const defaultConfigRef = {\n  current: DEFAULTS,\n}\n\nexport function useConfigContext() {\n  return React.useContext(configContext) || defaultConfigRef.current\n}\n\nexport function ReactQueryConfigProvider({ config, children }) {\n  let configContextValue = React.useContext(configContext)\n\n  const newConfig = React.useMemo(() => {\n    const newConfig = {\n      ...(configContextValue || defaultConfigRef.current),\n      ...config,\n    }\n\n    // Default useErrorBoundary to the suspense value\n    if (typeof newConfig.useErrorBoundary === 'undefined') {\n      newConfig.useErrorBoundary = newConfig.suspense\n    }\n\n    return newConfig\n  }, [config, configContextValue])\n\n  React.useEffect(() => {\n    // restore previous config on unmount\n    return () => {\n      defaultConfigRef.current = { ...(configContextValue || DEFAULTS) }\n\n      // Default useErrorBoundary to the suspense value\n      if (typeof defaultConfigRef.current.useErrorBoundary === 'undefined') {\n        defaultConfigRef.current.useErrorBoundary =\n          defaultConfigRef.current.suspense\n      }\n    }\n  }, [configContextValue])\n\n  if (!configContextValue) {\n    defaultConfigRef.current = newConfig\n  }\n\n  return (\n    <configContext.Provider value={newConfig}>\n      {children}\n    </configContext.Provider>\n  )\n}\n\nexport function defaultQueryKeySerializerFn(queryKey) {\n  if (!queryKey) {\n    return []\n  }\n\n  if (typeof queryKey === 'function') {\n    try {\n      return defaultQueryKeySerializerFn(queryKey())\n    } catch {\n      return []\n    }\n  }\n\n  if (typeof queryKey === 'string') {\n    queryKey = [queryKey]\n  }\n\n  const queryHash = stableStringify(queryKey)\n  queryKey = JSON.parse(queryHash)\n\n  return [queryHash, queryKey]\n}\n","import React from 'react'\nimport {\n  isServer,\n  functionalUpdate,\n  cancelledError,\n  isDocumentVisible,\n  statusLoading,\n  statusSuccess,\n  statusError,\n  getQueryArgs,\n  deepIncludes,\n  noop,\n} from './utils'\nimport { defaultConfigRef } from './config'\n\nexport const queryCache = makeQueryCache()\n\nexport const queryCacheContext = React.createContext(queryCache)\n\nexport const queryCaches = [queryCache]\n\nexport function useQueryCache() {\n  return React.useContext(queryCacheContext)\n}\n\nexport function ReactQueryCacheProvider({ queryCache, children }) {\n  const cache = React.useMemo(() => queryCache || makeQueryCache(), [\n    queryCache,\n  ])\n\n  React.useEffect(() => {\n    queryCaches.push(cache)\n\n    return () => {\n      // remove the cache from the active list\n      const i = queryCaches.indexOf(cache)\n      if (i >= 0) {\n        queryCaches.splice(i, 1)\n      }\n      // if the cache was created by us, we need to tear it down\n      if (queryCache == null) {\n        cache.clear()\n      }\n    }\n  }, [cache, queryCache])\n\n  return (\n    <queryCacheContext.Provider value={cache}>\n      {children}\n    </queryCacheContext.Provider>\n  )\n}\n\nconst actionInit = {}\nconst actionFailed = {}\nconst actionMarkStale = {}\nconst actionMarkGC = {}\nconst actionFetch = {}\nconst actionSuccess = {}\nconst actionError = {}\nconst actionSetState = {}\n\nexport function makeQueryCache() {\n  const listeners = []\n\n  const cache = {\n    queries: {},\n    isFetching: 0,\n  }\n\n  const notifyGlobalListeners = () => {\n    cache.isFetching = Object.values(cache.queries).reduce(\n      (acc, query) => (query.state.isFetching ? acc + 1 : acc),\n      0\n    )\n    listeners.forEach(d => d(cache))\n  }\n\n  cache.subscribe = cb => {\n    listeners.push(cb)\n    return () => {\n      listeners.splice(listeners.indexOf(cb), 1)\n    }\n  }\n\n  cache.clear = () => {\n    Object.values(cache.queries).forEach(query => query.clear())\n    cache.queries = {}\n    notifyGlobalListeners()\n  }\n\n  const findQueries = (predicate, { exact } = {}) => {\n    if (typeof predicate !== 'function') {\n      const [\n        queryHash,\n        queryKey,\n      ] = defaultConfigRef.current.queryKeySerializerFn(predicate)\n      predicate = d =>\n        exact ? d.queryHash === queryHash : deepIncludes(d.queryKey, queryKey)\n    }\n\n    return Object.values(cache.queries).filter(predicate)\n  }\n\n  cache.getQueries = findQueries\n\n  cache.getQuery = queryKey => findQueries(queryKey, { exact: true })[0]\n\n  cache.getQueryData = queryKey => cache.getQuery(queryKey)?.state.data\n\n  cache.removeQueries = (predicate, { exact } = {}) => {\n    const foundQueries = findQueries(predicate, { exact })\n\n    foundQueries.forEach(query => {\n      clearTimeout(query.staleTimeout)\n      delete cache.queries[query.queryHash]\n    })\n\n    if (foundQueries.length) {\n      notifyGlobalListeners()\n    }\n  }\n\n  cache.cancelQueries = (predicate, { exact } = {}) => {\n    const foundQueries = findQueries(predicate, { exact })\n\n    foundQueries.forEach(query => {\n      query.cancel()\n    })\n\n    if (foundQueries.length) {\n      notifyGlobalListeners()\n    }\n  }\n\n  cache.refetchQueries = async (\n    predicate,\n    { exact, throwOnError, force } = {}\n  ) => {\n    const foundQueries =\n      predicate === true\n        ? Object.values(cache.queries)\n        : findQueries(predicate, { exact })\n\n    try {\n      return await Promise.all(\n        foundQueries.map(query => query.fetch({ force }))\n      )\n    } catch (err) {\n      if (throwOnError) {\n        throw err\n      }\n    }\n  }\n\n  cache._buildQuery = (userQueryKey, queryVariables, queryFn, config) => {\n    let [queryHash, queryKey] = config.queryKeySerializerFn(userQueryKey)\n\n    let query = cache.queries[queryHash]\n\n    if (query) {\n      Object.assign(query, { queryVariables, queryFn })\n      query.config = { ...query.config, ...config }\n    } else {\n      query = makeQuery({\n        cache,\n        queryKey,\n        queryHash,\n        queryVariables,\n        queryFn,\n        config,\n      })\n\n      // If the query started with data, schedule\n      // a stale timeout\n      if (!isServer && query.state.data) {\n        query.scheduleStaleTimeout()\n\n        // Simulate a query healing process\n        query.heal()\n        // Schedule for garbage collection in case\n        // nothing subscribes to this query\n        query.scheduleGarbageCollection()\n      }\n\n      if (query.queryHash) {\n        if (!isServer) {\n          cache.queries[queryHash] = query\n          // Here, we setTimeout so as to not trigger\n          // any setState's in parent components in the\n          // middle of the render phase.\n          setTimeout(() => {\n            notifyGlobalListeners()\n          })\n        }\n      }\n    }\n\n    return query\n  }\n\n  cache.prefetchQuery = async (...args) => {\n    let [\n      queryKey,\n      queryVariables,\n      queryFn,\n      { force, ...config },\n    ] = getQueryArgs(args)\n\n    config = {\n      ...defaultConfigRef.current,\n      ...config,\n    }\n\n    const query = cache._buildQuery(queryKey, queryVariables, queryFn, config)\n\n    // Don't prefetch queries that are fresh, unless force is passed\n    if (query.state.isStale || force) {\n      // Trigger a fetch and return the promise\n      try {\n        const res = await query.fetch({ force })\n        query.wasPrefetched = true\n        return res\n      } catch (err) {\n        if (config.throwOnError) {\n          throw err\n        }\n      }\n    }\n\n    return query.state.data\n  }\n\n  cache.setQueryData = (queryKey, updater, { exact, ...config } = {}) => {\n    let queries = findQueries(queryKey, { exact })\n\n    if (!queries.length && typeof queryKey !== 'function') {\n      queries = [\n        cache._buildQuery(queryKey, undefined, () => Promise.resolve(), {\n          ...defaultConfigRef.current,\n          ...config,\n        }),\n      ]\n    }\n\n    queries.forEach(d => d.setData(updater))\n  }\n\n  function makeQuery(options) {\n    const queryCache = options.cache\n    const reducer = options.config.queryReducer || defaultQueryReducer\n\n    const noQueryHash = typeof options.queryHash === 'undefined'\n\n    const initialData =\n      typeof options.config.initialData === 'function'\n        ? options.config.initialData()\n        : options.config.initialData\n\n    const hasInitialData = typeof initialData !== 'undefined'\n\n    const isStale = noQueryHash ? true : !hasInitialData\n\n    const manual = options.config.manual\n\n    const initialStatus =\n      noQueryHash || manual || hasInitialData ? statusSuccess : statusLoading\n\n    const query = {\n      ...options,\n      instances: [],\n      state: reducer(undefined, {\n        type: actionInit,\n        initialStatus,\n        initialData,\n        hasInitialData,\n        isStale,\n        manual,\n      }),\n    }\n\n    const dispatch = action => {\n      query.state = reducer(query.state, action)\n      query.instances.forEach(d => d.onStateUpdate(query.state))\n      notifyGlobalListeners()\n    }\n\n    query.scheduleStaleTimeout = () => {\n      if (query.config.staleTime === Infinity) {\n        return\n      }\n      query.staleTimeout = setTimeout(() => {\n        if (queryCache.getQuery(query.queryKey)) {\n          dispatch({ type: actionMarkStale })\n        }\n      }, query.config.staleTime)\n    }\n\n    query.scheduleGarbageCollection = () => {\n      if (query.config.cacheTime === Infinity) {\n        return\n      }\n      dispatch({ type: actionMarkGC })\n      query.cacheTimeout = setTimeout(\n        () => {\n          cache.removeQueries(\n            d =>\n              d.state.markedForGarbageCollection &&\n              d.queryHash === query.queryHash\n          )\n        },\n        typeof query.state.data === 'undefined' &&\n          query.state.status !== 'error'\n          ? 0\n          : query.config.cacheTime\n      )\n    }\n\n    query.heal = () => {\n      // Stop the query from being garbage collected\n      clearTimeout(query.cacheTimeout)\n\n      // Mark the query as not cancelled\n      query.cancelled = null\n    }\n\n    query.cancel = () => {\n      query.cancelled = cancelledError\n\n      if (query.cancelPromises) {\n        query.cancelPromises()\n      }\n\n      delete query.promise\n\n      notifyGlobalListeners()\n    }\n\n    query.updateInstance = instance => {\n      let found = query.instances.find(d => d.id === instance.id)\n\n      if (found) {\n        Object.assign(found, instance)\n      } else {\n        found = {\n          onStateUpdate: noop,\n          ...instance,\n        }\n        query.instances.push(instance)\n      }\n    }\n\n    query.subscribe = instanceId => {\n      query.heal()\n\n      // Return the unsubscribe function\n      return () => {\n        query.instances = query.instances.filter(d => d.id !== instanceId)\n\n        if (!query.instances.length) {\n          query.cancel()\n\n          // Schedule garbage collection\n          query.scheduleGarbageCollection()\n        }\n      }\n    }\n\n    // Set up the fetch function\n    const tryFetchData = async (queryFn, ...args) => {\n      try {\n        // Perform the query\n        const promise = queryFn(...query.config.queryFnParamsFilter(args))\n\n        query.cancelPromises = () => promise.cancel?.()\n\n        const data = await promise\n        delete query.shouldContinueRetryOnFocus\n\n        delete query.cancelPromises\n        if (query.cancelled) throw query.cancelled\n\n        return data\n      } catch (error) {\n        delete query.cancelPromises\n        if (query.cancelled) throw query.cancelled\n\n        // If we fail, increase the failureCount\n        dispatch({ type: actionFailed })\n\n        // Do we need to retry the request?\n        if (\n          query.config.retry === true ||\n          query.state.failureCount <= query.config.retry ||\n          (typeof query.config.retry === 'function' &&\n            query.config.retry(query.state.failureCount, error))\n        ) {\n          // Only retry if the document is visible\n          if (!isDocumentVisible()) {\n            // set this flag to continue fetch retries on focus\n            query.shouldContinueRetryOnFocus = true\n            return new Promise(noop)\n          }\n\n          delete query.shouldContinueRetryOnFocus\n\n          // Determine the retryDelay\n          const delay = functionalUpdate(\n            query.config.retryDelay,\n            query.state.failureCount\n          )\n\n          // Return a new promise with the retry\n          return await new Promise((resolve, reject) => {\n            // Keep track of the retry timeout\n            setTimeout(async () => {\n              if (query.cancelled) return reject(query.cancelled)\n\n              try {\n                const data = await tryFetchData(queryFn, ...args)\n                if (query.cancelled) return reject(query.cancelled)\n                resolve(data)\n              } catch (error) {\n                if (query.cancelled) return reject(query.cancelled)\n                reject(error)\n              }\n            }, delay)\n          })\n        }\n\n        throw error\n      }\n    }\n\n    query.fetch = async ({ force, __queryFn = query.queryFn } = {}) => {\n      // Don't refetch fresh queries that don't have a queryHash\n\n      if (!query.queryHash || (!query.state.isStale && !force)) {\n        return\n      }\n\n      // Create a new promise for the query cache if necessary\n      if (!query.promise) {\n        query.promise = (async () => {\n          // If there are any retries pending for this query, kill them\n          query.cancelled = null\n\n          const callbackInstances = [...query.instances]\n\n          if (query.wasSuspended) {\n            callbackInstances.unshift(query.suspenseInstance)\n          }\n\n          try {\n            // Set up the query refreshing state\n            dispatch({ type: actionFetch })\n\n            // Try to fetch\n            let data = await tryFetchData(\n              __queryFn,\n              ...query.queryKey,\n              ...query.queryVariables\n            )\n\n            query.setData(old =>\n              query.config.isDataEqual(old, data) ? old : data\n            )\n\n            callbackInstances.forEach(\n              instance =>\n                instance.onSuccess && instance.onSuccess(query.state.data)\n            )\n\n            callbackInstances.forEach(\n              instance =>\n                instance.onSettled && instance.onSettled(query.state.data, null)\n            )\n\n            delete query.promise\n\n            return data\n          } catch (error) {\n            dispatch({\n              type: actionError,\n              cancelled: error === query.cancelled,\n              error,\n            })\n\n            delete query.promise\n\n            if (error !== query.cancelled) {\n              callbackInstances.forEach(\n                instance => instance.onError && instance.onError(error)\n              )\n\n              callbackInstances.forEach(\n                instance =>\n                  instance.onSettled && instance.onSettled(undefined, error)\n              )\n\n              throw error\n            }\n          }\n        })()\n      }\n\n      return query.promise\n    }\n\n    query.setState = updater => dispatch({ type: actionSetState, updater })\n\n    query.setData = updater => {\n      // Set data and mark it as cached\n      dispatch({ type: actionSuccess, updater })\n\n      // Schedule a fresh invalidation!\n      clearTimeout(query.staleTimeout)\n      query.scheduleStaleTimeout()\n    }\n\n    query.clear = () => {\n      clearTimeout(query.staleTimeout)\n      clearTimeout(query.cacheTimeout)\n      query.cancel()\n    }\n\n    return query\n  }\n\n  return cache\n}\n\nexport function defaultQueryReducer(state, action) {\n  switch (action.type) {\n    case actionInit:\n      return {\n        status: action.initialStatus,\n        error: null,\n        isFetching:\n          action.hasInitialData || action.manual\n            ? false\n            : action.initialStatus === 'loading',\n        canFetchMore: false,\n        failureCount: 0,\n        isStale: action.isStale,\n        markedForGarbageCollection: false,\n        data: action.initialData,\n        updatedAt: action.hasInitialData ? Date.now() : 0,\n      }\n    case actionFailed:\n      return {\n        ...state,\n        failureCount: state.failureCount + 1,\n      }\n    case actionMarkStale:\n      return {\n        ...state,\n        isStale: true,\n      }\n    case actionMarkGC: {\n      return {\n        ...state,\n        markedForGarbageCollection: true,\n      }\n    }\n    case actionFetch:\n      return {\n        ...state,\n        status: state.status === statusError ? statusLoading : state.status,\n        isFetching: true,\n        failureCount: 0,\n      }\n    case actionSuccess:\n      return {\n        ...state,\n        status: statusSuccess,\n        data: functionalUpdate(action.updater, state.data),\n        error: null,\n        isStale: false,\n        isFetching: false,\n        canFetchMore: action.canFetchMore,\n        updatedAt: Date.now(),\n        failureCount: 0,\n      }\n    case actionError:\n      return {\n        ...state,\n        isFetching: false,\n        isStale: true,\n        ...(!action.cancelled && {\n          status: statusError,\n          error: action.error,\n        }),\n      }\n    case actionSetState:\n      return functionalUpdate(action.updater, state)\n    default:\n      throw new Error()\n  }\n}\n","import { isOnline, isDocumentVisible, Console, isServer } from './utils'\nimport { defaultConfigRef } from './config'\nimport { queryCaches } from './queryCache'\n\nconst visibilityChangeEvent = 'visibilitychange'\nconst focusEvent = 'focus'\n\nconst onWindowFocus = () => {\n  const { refetchAllOnWindowFocus } = defaultConfigRef.current\n\n  if (isDocumentVisible() && isOnline()) {\n    queryCaches.forEach(queryCache =>\n      queryCache\n        .refetchQueries(query => {\n          if (!query.instances.length) {\n            return false\n          }\n\n          if (query.config.manual === true) {\n            return false\n          }\n\n          if (query.shouldContinueRetryOnFocus) {\n            // delete promise, so `fetch` will create new one\n            delete query.promise\n            return true\n          }\n\n          if (typeof query.config.refetchOnWindowFocus === 'undefined') {\n            return refetchAllOnWindowFocus\n          } else {\n            return query.config.refetchOnWindowFocus\n          }\n        })\n        .catch(Console.error)\n    )\n  }\n}\n\nlet removePreviousHandler\n\nexport function setFocusHandler(callback) {\n  // Unsub the old watcher\n  if (removePreviousHandler) {\n    removePreviousHandler()\n  }\n  // Sub the new watcher\n  removePreviousHandler = callback(onWindowFocus)\n}\n\nsetFocusHandler(handleFocus => {\n  // Listen to visibillitychange and focus\n  if (!isServer && window?.addEventListener) {\n    window.addEventListener(visibilityChangeEvent, handleFocus, false)\n    window.addEventListener(focusEvent, handleFocus, false)\n\n    return () => {\n      // Be sure to unsubscribe if a new handler is set\n      window.removeEventListener(visibilityChangeEvent, handleFocus)\n      window.removeEventListener(focusEvent, handleFocus)\n    }\n  }\n})\n","import React from 'react'\n\nimport { useQueryCache } from './queryCache'\n\nexport function useIsFetching() {\n  const queryCache = useQueryCache()\n  const [state, setState] = React.useState({})\n\n  React.useEffect(() => {\n    return queryCache.subscribe(() => setState({}))\n  }, [])\n\n  return React.useMemo(() => state && queryCache.isFetching, [state])\n}\n","import React from 'react'\n\n//\n\nimport { useConfigContext } from './config'\nimport {\n  statusIdle,\n  statusLoading,\n  statusSuccess,\n  statusError,\n  useGetLatest,\n  Console,\n  uid,\n  useMountedCallback,\n  noop,\n} from './utils'\n\nconst getDefaultState = () => ({\n  status: statusIdle,\n  data: undefined,\n  error: null,\n})\n\nconst actionReset = {}\nconst actionLoading = {}\nconst actionResolve = {}\nconst actionReject = {}\n\nfunction mutationReducer(state, action) {\n  if (action.type === actionReset) {\n    return getDefaultState()\n  }\n  if (action.type === actionLoading) {\n    return {\n      status: statusLoading,\n    }\n  }\n  if (action.type === actionResolve) {\n    return {\n      status: statusSuccess,\n      data: action.data,\n    }\n  }\n  if (action.type === actionReject) {\n    return {\n      status: statusError,\n      error: action.error,\n    }\n  }\n  throw new Error()\n}\n\nexport function useMutation(mutationFn, config = {}) {\n  const [state, unsafeDispatch] = React.useReducer(\n    mutationReducer,\n    null,\n    getDefaultState\n  )\n\n  const dispatch = useMountedCallback(unsafeDispatch)\n\n  const getMutationFn = useGetLatest(mutationFn)\n\n  const getConfig = useGetLatest({\n    ...useConfigContext(),\n    ...config,\n  })\n\n  const latestMutationRef = React.useRef()\n\n  const mutate = React.useCallback(\n    async (\n      variables,\n      { onSuccess = noop, onError = noop, onSettled = noop, throwOnError } = {}\n    ) => {\n      const config = getConfig()\n\n      const mutationId = uid()\n      latestMutationRef.current = mutationId\n\n      const isLatest = () => latestMutationRef.current === mutationId\n\n      dispatch({ type: actionLoading })\n\n      let snapshotValue\n\n      try {\n        snapshotValue = await config.onMutate(variables)\n\n        let data\n\n        if (isLatest()) {\n          data = await getMutationFn()(variables)\n        }\n\n        if (isLatest()) {\n          await onSuccess(data, variables)\n        }\n\n        if (isLatest()) {\n          await config.onSuccess(data, variables)\n        }\n\n        if (isLatest()) {\n          await onSettled(data, null, variables)\n        }\n\n        if (isLatest()) {\n          await config.onSettled(data, null, variables)\n        }\n\n        if (isLatest()) {\n          dispatch({ type: actionResolve, data })\n        }\n\n        return data\n      } catch (error) {\n        if (isLatest()) {\n          Console.error(error)\n          await onError(error, variables, snapshotValue)\n        }\n\n        if (isLatest()) {\n          await config.onError(error, variables, snapshotValue)\n        }\n\n        if (isLatest()) {\n          await onSettled(undefined, error, variables, snapshotValue)\n        }\n\n        if (isLatest()) {\n          await config.onSettled(undefined, error, variables, snapshotValue)\n        }\n\n        if (isLatest()) {\n          dispatch({ type: actionReject, error })\n\n          if (throwOnError ?? config.throwOnError) {\n            throw error\n          }\n        }\n      }\n    },\n    [dispatch, getConfig, getMutationFn]\n  )\n\n  const reset = React.useCallback(() => dispatch({ type: actionReset }), [\n    dispatch,\n  ])\n\n  React.useEffect(() => {\n    if (getConfig().useErrorBoundary && state.error) {\n      throw state.error\n    }\n  }, [getConfig, state.error])\n\n  return [mutate, { ...state, reset }]\n}\n","import React from 'react'\n\n//\n\nimport { useQueryCache } from './queryCache'\nimport { useConfigContext } from './config'\nimport {\n  useUid,\n  isDocumentVisible,\n  Console,\n  useGetLatest,\n  useMountedCallback,\n} from './utils'\n\nexport function useBaseQuery(queryKey, queryVariables, queryFn, config = {}) {\n  const instanceId = useUid()\n\n  config = {\n    ...useConfigContext(),\n    ...config,\n  }\n\n  const queryCache = useQueryCache()\n\n  const queryRef = React.useRef()\n\n  const newQuery = queryCache._buildQuery(\n    queryKey,\n    queryVariables,\n    queryFn,\n    config\n  )\n\n  const useCachedQuery =\n    queryRef.current &&\n    typeof queryRef.current.queryHash === 'undefined' &&\n    typeof newQuery.queryHash === 'undefined'\n\n  // Do not use new query with undefined queryHash, if previous query also had undefined queryHash.\n  // Otherwise this will cause infinite loop.\n  if (!useCachedQuery) {\n    queryRef.current = newQuery\n  }\n\n  const query = queryRef.current\n\n  const [, unsafeRerender] = React.useState()\n\n  const rerender = useMountedCallback(unsafeRerender)\n\n  const getLatestConfig = useGetLatest(config)\n  const refetch = React.useCallback(\n    async ({ throwOnError, ...rest } = {}) => {\n      try {\n        return await query.fetch(rest)\n      } catch (err) {\n        if (throwOnError) {\n          throw err\n        }\n      }\n    },\n    [query]\n  )\n\n  query.suspenseInstance = {\n    onSuccess: data => getLatestConfig().onSuccess(data),\n    onError: err => getLatestConfig().onError(err),\n    onSettled: (data, err) => getLatestConfig().onSettled(data, err),\n  }\n\n  // After mount, subscribe to the query\n  React.useEffect(() => {\n    // Update the instance to the query again, but not as a placeholder\n    query.updateInstance({\n      id: instanceId,\n      onStateUpdate: () => rerender({}),\n      onSuccess: data => getLatestConfig().onSuccess(data),\n      onError: err => getLatestConfig().onError(err),\n      onSettled: (data, err) => getLatestConfig().onSettled(data, err),\n    })\n\n    return query.subscribe(instanceId)\n  }, [getLatestConfig, instanceId, query, rerender])\n\n  React.useEffect(() => {\n    // Perform the initial fetch for this query if necessary\n    if (\n      !getLatestConfig().manual && // Don't auto fetch if config is set to manual query\n      !query.wasPrefetched && // Don't double fetch for prefetched queries\n      !query.wasSuspended && // Don't double fetch for suspense\n      query.state.isStale && // Only refetch if stale\n      (getLatestConfig().refetchOnMount || query.instances.length === 1)\n    ) {\n      refetch().catch(Console.error)\n    }\n\n    query.wasPrefetched = false\n    query.wasSuspended = false\n  }, [getLatestConfig, query, refetch])\n\n  // Handle refetch interval\n  React.useEffect(() => {\n    const query = queryRef.current\n    if (\n      config.refetchInterval &&\n      (!query.currentRefetchInterval ||\n        // shorter interval should override previous one\n        config.refetchInterval < query.currentRefetchInterval)\n    ) {\n      query.currentRefetchInterval = config.refetchInterval\n      clearInterval(query.refetchIntervalId)\n      query.refetchIntervalId = setInterval(() => {\n        if (isDocumentVisible() || config.refetchIntervalInBackground) {\n          refetch().catch(Console.error)\n        }\n      }, config.refetchInterval)\n\n      return () => {\n        clearInterval(query.refetchIntervalId)\n        delete query.refetchIntervalId\n        delete query.currentRefetchInterval\n      }\n    }\n  }, [config.refetchInterval, config.refetchIntervalInBackground, refetch])\n\n  return {\n    ...query.state,\n    config,\n    query,\n    refetch,\n  }\n}\n","import { useBaseQuery } from './useBaseQuery'\nimport { getQueryArgs, handleSuspense } from './utils'\n\nexport function useQuery(...args) {\n  const query = useBaseQuery(...getQueryArgs(args))\n\n  handleSuspense(query)\n\n  return query\n}\n","import React from 'react'\n\n//\n\nimport { useBaseQuery } from './useBaseQuery'\nimport { getQueryArgs, handleSuspense } from './utils'\n\nexport function usePaginatedQuery(...args) {\n  let [queryKey, queryVariables, queryFn, config = {}] = getQueryArgs(args)\n\n  const lastDataRef = React.useRef()\n\n  if (!queryKey) {\n    lastDataRef.current = undefined\n  }\n\n  // If latestData is set, don't use initialData\n  if (typeof lastDataRef.current !== 'undefined') {\n    delete config.initialData\n  }\n\n  const query = useBaseQuery(queryKey, queryVariables, queryFn, config)\n\n  let { data: latestData, status } = query\n\n  React.useEffect(() => {\n    if (status === 'success' && typeof latestData !== 'undefined') {\n      lastDataRef.current = latestData\n    }\n  }, [latestData, status])\n\n  let resolvedData = latestData\n\n  if (typeof resolvedData === 'undefined') {\n    resolvedData = lastDataRef.current\n  }\n\n  if (typeof resolvedData !== 'undefined') {\n    status = 'success'\n  }\n\n  const paginatedQuery = {\n    ...query,\n    resolvedData,\n    latestData,\n    status,\n  }\n\n  handleSuspense(paginatedQuery)\n\n  return paginatedQuery\n}\n","import React from 'react'\n\n//\n\nimport { useBaseQuery } from './useBaseQuery'\nimport { getQueryArgs, useGetLatest, handleSuspense } from './utils'\n\nexport function useInfiniteQuery(...args) {\n  const queryInfoRef = React.useRef()\n  let [queryKey, queryVariables, queryFn, config = {}] = getQueryArgs(args)\n\n  const { getFetchMore } = config\n  const getGetFetchMore = useGetLatest(getFetchMore)\n\n  // The default queryFn will query all pages and map them together\n  const originalQueryFn = queryFn\n\n  queryFn = async () => {\n    const data = []\n    const pageVariables = [...queryInfoRef.current.query.pageVariables]\n    const rebuiltPageVariables = []\n\n    do {\n      const args = pageVariables.shift()\n\n      if (!data.length) {\n        // the first page query doesn't need to be rebuilt\n        data.push(await originalQueryFn(...args))\n        rebuiltPageVariables.push(args)\n      } else {\n        // get an up-to-date cursor based on the previous data set\n        const nextCursor = getGetFetchMore()(data[data.length - 1], data)\n\n        // break early if there's no next cursor\n        // otherwise we'll start from the beginning\n        // which will cause unwanted duplication\n        if (!nextCursor) {\n          break\n        }\n\n        const pageArgs = [\n          // remove the last argument (the previously saved cursor)\n          ...args.slice(0, -1),\n          nextCursor,\n        ]\n\n        data.push(await originalQueryFn(...pageArgs))\n        rebuiltPageVariables.push(pageArgs)\n      }\n    } while (pageVariables.length)\n\n    queryInfoRef.current.query.canFetchMore = getGetFetchMore()(\n      data[data.length - 1],\n      data\n    )\n    queryInfoRef.current.query.pageVariables = rebuiltPageVariables\n\n    return data\n  }\n\n  const queryInfo = useBaseQuery(queryKey, queryVariables, queryFn, config)\n\n  if (\n    typeof queryInfo.query.canFetchMore === 'undefined' &&\n    typeof queryInfo.data !== 'undefined'\n  ) {\n    queryInfo.query.canFetchMore = getGetFetchMore()(\n      queryInfo.data[queryInfo.data.length - 1],\n      queryInfo.data\n    )\n  }\n\n  queryInfoRef.current = queryInfo\n\n  let {\n    refetch,\n    data = [],\n    query: { canFetchMore },\n  } = queryInfo\n\n  // Here we seed the pageVariabes for the query\n  if (!queryInfo.query.pageVariables) {\n    queryInfo.query.pageVariables = [\n      [...queryInfo.query.queryKey, ...queryInfo.query.queryVariables],\n    ]\n  }\n\n  const fetchMore = React.useCallback(\n    (fetchMoreInfo = queryInfoRef.current.query.canFetchMore) =>\n      queryInfoRef.current.query.canFetchMore\n        ? refetch({\n            force: true,\n            __queryFn: async (...args) => {\n              try {\n                queryInfoRef.current.query.setState(old => ({\n                  ...old,\n                  isFetchingMore: true,\n                }))\n\n                const newArgs = [...args, fetchMoreInfo]\n                queryInfoRef.current.query.pageVariables.push(newArgs)\n\n                const data = [\n                  ...queryInfoRef.current.data,\n                  await originalQueryFn(...newArgs),\n                ]\n\n                queryInfoRef.current.query.canFetchMore = getGetFetchMore()(\n                  data[data.length - 1],\n                  data\n                )\n\n                return data\n              } finally {\n                queryInfoRef.current.query.setState(old => ({\n                  ...old,\n                  isFetchingMore: false,\n                }))\n              }\n            },\n          })\n        : void 0,\n    [getGetFetchMore, originalQueryFn, refetch]\n  )\n\n  handleSuspense(queryInfo)\n\n  return {\n    ...queryInfo,\n    data,\n    canFetchMore,\n    fetchMore,\n  }\n}\n"],"names":["statusIdle","statusLoading","statusError","statusSuccess","_uid","uid","cancelledError","isServer","window","noop","Console","console","error","warn","log","setConsole","c","useGetLatest","obj","ref","React","useRef","current","useCallback","functionalUpdate","updater","old","stableStringifyReplacer","_","value","isObject","Object","assign","keys","sort","map","key","stableStringify","JSON","stringify","a","Array","isArray","deepIncludes","b","some","isDocumentVisible","document","undefined","visibilityState","getQueryArgs","args","hasOwnProperty","queryKey","variables","queryFn","config","Error","useMountedCallback","callback","mounted","handleSuspense","queryInfo","suspense","useErrorBoundary","status","setTimeout","query","state","wasSuspended","refetch","configContext","createContext","DEFAULTS","retry","retryDelay","attemptIndex","Math","min","staleTime","cacheTime","refetchAllOnWindowFocus","refetchInterval","queryKeySerializerFn","defaultQueryKeySerializerFn","queryHash","parse","queryFnParamsFilter","d","throwOnError","onMutate","onSuccess","onError","onSettled","refetchOnMount","isDataEqual","deepEqual","length","i","valueOf","prototype","call","defaultConfigRef","useConfigContext","useContext","ReactQueryConfigProvider","children","configContextValue","newConfig","useMemo","useEffect","Provider","then","direct","Promise","resolve","body","recover","result","e","f","arguments","apply","this","reject","queryCache","makeQueryCache","queryCacheContext","queryCaches","useQueryCache","ReactQueryCacheProvider","cache","push","indexOf","splice","clear","actionInit","actionFailed","actionMarkStale","actionMarkGC","actionFetch","actionSuccess","actionError","actionSetState","listeners","queries","isFetching","notifyGlobalListeners","values","reduce","acc","forEach","subscribe","cb","findQueries","predicate","exact","filter","getQueries","getQuery","getQueryData","_cache$getQuery","data","removeQueries","foundQueries","clearTimeout","staleTimeout","cancelQueries","cancel","refetchQueries","force","all","fetch","err","_buildQuery","userQueryKey","queryVariables","options","reducer","queryReducer","defaultQueryReducer","noQueryHash","initialData","hasInitialData","isStale","manual","instances","type","initialStatus","dispatch","action","onStateUpdate","scheduleStaleTimeout","Infinity","scheduleGarbageCollection","cacheTimeout","markedForGarbageCollection","heal","cancelled","cancelPromises","promise","updateInstance","instance","found","find","id","instanceId","tryFetchData","shouldContinueRetryOnFocus","failureCount","delay","__queryFn","_async","callbackInstances","unshift","suspenseInstance","setData","setState","makeQuery","prefetchQuery","res","wasPrefetched","setQueryData","canFetchMore","updatedAt","Date","now","removePreviousHandler","onWindowFocus","navigator","onLine","refetchOnWindowFocus","catch","setFocusHandler","useIsFetching","useState","_await","handleFocus","_window","addEventListener","removeEventListener","getDefaultState","_empty","actionReset","_awaitIgnored","actionLoading","_invoke","actionResolve","actionReject","mutationReducer","useMutation","mutationFn","useReducer","getMutationFn","getConfig","latestMutationRef","mutate","mutationId","snapshotValue","isLatest","reset","useBaseQuery","queryRef","newQuery","rerender","getLatestConfig","rest","currentRefetchInterval","clearInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","useQuery","usePaginatedQuery","lastDataRef","latestData","resolvedData","paginatedQuery","pact","s","o","_settle","bind","v","observer","_Pact","onFulfilled","onRejected","_this","thenable","test","awaitBody","_isSettledPact","shouldContinue","_resumeAfterBody","_resumeAfterTest","thrown","finalizer","useInfiniteQuery","queryInfoRef","getFetchMore","getGetFetchMore","originalQueryFn","pageVariables","rebuiltPageVariables","shift","nextCursor","pageArgs","slice","fetchMore","fetchMoreInfo","isFetchingMore","newArgs"],"mappings":"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"}