{"version":3,"file":"react-query.production.min.js","sources":["../src/utils.js","../src/config.js","../src/queryCache.js","../src/setFocusHandler.js","../src/useMutation.js","../src/useBaseQuery.js","../src/useInfiniteQuery.js","../src/useIsFetching.js","../src/usePaginatedQuery.js","../src/useQuery.js"],"sourcesContent":["import React from 'react'\n\n//\n\nexport const statusIdle = 'idle'\nexport const statusLoading = 'loading'\nexport const statusError = 'error'\nexport const statusSuccess = 'success'\n\nlet _uid = 0\nexport const uid = () => _uid++\nexport const cancelledError = {}\nexport let globalStateListeners = []\nexport const isServer = typeof window === 'undefined'\nexport const noop = () => {}\nexport const identity = d => d\nexport let Console = console || { error: noop, warn: noop, log: noop }\n\nexport function useUid() {\n  const ref = React.useRef(null)\n\n  if (ref.current === null) {\n    ref.current = uid()\n  }\n\n  return ref.current\n}\n\nexport function setConsole(c) {\n  Console = c\n}\n\nexport function useGetLatest(obj) {\n  const ref = React.useRef()\n  ref.current = obj\n\n  return React.useCallback(() => ref.current, [])\n}\n\nexport function functionalUpdate(updater, old) {\n  return typeof updater === 'function' ? updater(old) : updater\n}\n\nexport function stableStringifyReplacer(_, value) {\n  return isObject(value)\n    ? Object.assign(\n        {},\n        ...Object.keys(value)\n          .sort()\n          .map(key => ({\n            [key]: value[key],\n          }))\n      )\n    : value\n}\n\nexport function stableStringify(obj) {\n  return JSON.stringify(obj, stableStringifyReplacer)\n}\n\nexport function isObject(a) {\n  return a && typeof a === 'object' && !Array.isArray(a)\n}\n\nexport function deepIncludes(a, b) {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (typeof a === 'object') {\n    return !Object.keys(b).some(key => !deepIncludes(a[key], b[key]))\n  }\n\n  return false\n}\n\nexport function isDocumentVisible() {\n  return (\n    typeof document === 'undefined' ||\n    document.visibilityState === undefined ||\n    document.visibilityState === 'visible' ||\n    document.visibilityState === 'prerender'\n  )\n}\n\nexport function isOnline() {\n  return navigator.onLine === undefined || navigator.onLine\n}\n\nexport function getQueryArgs(args) {\n  if (isObject(args[0])) {\n    if (\n      args[0].hasOwnProperty('queryKey') &&\n      args[0].hasOwnProperty('queryFn')\n    ) {\n      const { queryKey, variables = [], queryFn, config = {} } = args[0]\n      return [queryKey, variables, queryFn, config]\n    } else {\n      throw new Error('queryKey and queryFn keys are required.')\n    }\n  }\n\n  if (typeof args[2] === 'function') {\n    const [queryKey, variables = [], queryFn, config = {}] = args\n    return [queryKey, variables, queryFn, config]\n  }\n\n  const [queryKey, queryFn, config = {}] = args\n\n  return [queryKey, [], queryFn, config]\n}\n\nexport function useMountedCallback(callback) {\n  const mounted = React.useRef(false)\n  React[isServer ? 'useEffect' : 'useLayoutEffect'](() => {\n    mounted.current = true\n    return () => (mounted.current = false)\n  }, [])\n  return React.useCallback(\n    (...args) => (mounted.current ? callback(...args) : void 0),\n    [callback]\n  )\n}\n\nexport function handleSuspense(queryInfo) {\n  if (queryInfo.config.suspense || queryInfo.config.useErrorBoundary) {\n    if (queryInfo.status === statusError) {\n      setTimeout(() => {\n        queryInfo.query.state.status = 'loading'\n      })\n      throw queryInfo.error\n    }\n  }\n\n  if (queryInfo.config.suspense) {\n    if (queryInfo.status === statusLoading) {\n      queryInfo.query.wasSuspended = true\n      throw queryInfo.refetch()\n    }\n  }\n}\n\n// This deep-equal is directly based on https://github.com/epoberezkin/fast-deep-equal.\n// The parts for comparing any non-JSON-supported values has been removed\nexport function deepEqual(a, b) {\n  if (a === b) return true\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    var length, i, keys\n    if (Array.isArray(a)) {\n      length = a.length\n      // eslint-disable-next-line eqeqeq\n      if (length != b.length) return false\n      for (i = length; i-- !== 0; ) if (!deepEqual(a[i], b[i])) return false\n      return true\n    }\n\n    if (a.valueOf !== Object.prototype.valueOf)\n      return a.valueOf() === b.valueOf()\n\n    keys = Object.keys(a)\n    length = keys.length\n    if (length !== Object.keys(b).length) return false\n\n    for (i = length; i-- !== 0; )\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false\n\n    for (i = length; i-- !== 0; ) {\n      var key = keys[i]\n\n      if (!deepEqual(a[key], b[key])) return false\n    }\n\n    return true\n  }\n\n  // true if both NaN, false otherwise\n  // eslint-disable-next-line no-self-compare\n  return a !== a && b !== b\n}\n","import React from 'react'\nimport { noop, stableStringify, identity, deepEqual } from './utils'\n\nexport const configContext = React.createContext()\n\nconst DEFAULTS = {\n  retry: 3,\n  retryDelay: attemptIndex => Math.min(1000 * 2 ** attemptIndex, 30000),\n  staleTime: 0,\n  cacheTime: 5 * 60 * 1000,\n  refetchAllOnWindowFocus: true,\n  refetchInterval: false,\n  suspense: false,\n  queryKeySerializerFn: defaultQueryKeySerializerFn,\n  queryFnParamsFilter: identity,\n  throwOnError: false,\n  useErrorBoundary: undefined, // this will default to the suspense value\n  onMutate: noop,\n  onSuccess: noop,\n  onError: noop,\n  onSettled: noop,\n  refetchOnMount: true,\n  isDataEqual: deepEqual,\n}\n\nexport const defaultConfigRef = {\n  current: DEFAULTS,\n}\n\nexport function useConfigContext() {\n  return React.useContext(configContext) || defaultConfigRef.current\n}\n\nexport function ReactQueryConfigProvider({ config, children }) {\n  let configContextValue = React.useContext(configContext)\n\n  const newConfig = React.useMemo(() => {\n    const newConfig = {\n      ...(configContextValue || defaultConfigRef.current),\n      ...config,\n    }\n\n    // Default useErrorBoundary to the suspense value\n    if (typeof newConfig.useErrorBoundary === 'undefined') {\n      newConfig.useErrorBoundary = newConfig.suspense\n    }\n\n    return newConfig\n  }, [config, configContextValue])\n\n  React.useEffect(() => {\n    // restore previous config on unmount\n    return () => {\n      defaultConfigRef.current = { ...(configContextValue || DEFAULTS) }\n\n      // Default useErrorBoundary to the suspense value\n      if (typeof defaultConfigRef.current.useErrorBoundary === 'undefined') {\n        defaultConfigRef.current.useErrorBoundary =\n          defaultConfigRef.current.suspense\n      }\n    }\n  }, [configContextValue])\n\n  if (!configContextValue) {\n    defaultConfigRef.current = newConfig\n  }\n\n  return (\n    <configContext.Provider value={newConfig}>\n      {children}\n    </configContext.Provider>\n  )\n}\n\nexport function defaultQueryKeySerializerFn(queryKey) {\n  if (!queryKey) {\n    return []\n  }\n\n  if (typeof queryKey === 'function') {\n    try {\n      return defaultQueryKeySerializerFn(queryKey())\n    } catch {\n      return []\n    }\n  }\n\n  if (typeof queryKey === 'string') {\n    queryKey = [queryKey]\n  }\n\n  const queryHash = stableStringify(queryKey)\n  queryKey = JSON.parse(queryHash)\n\n  return [queryHash, queryKey]\n}\n","import React from 'react'\nimport {\n  isServer,\n  functionalUpdate,\n  cancelledError,\n  isDocumentVisible,\n  statusLoading,\n  statusSuccess,\n  statusError,\n  getQueryArgs,\n  deepIncludes,\n  noop,\n} from './utils'\nimport { defaultConfigRef } from './config'\n\nexport const queryCache = makeQueryCache()\n\nexport const queryCacheContext = React.createContext(queryCache)\n\nexport const queryCaches = [queryCache]\n\nexport function useQueryCache() {\n  return React.useContext(queryCacheContext)\n}\n\nexport function ReactQueryCacheProvider({ queryCache, children }) {\n  const cache = React.useMemo(() => queryCache || makeQueryCache(), [\n    queryCache,\n  ])\n\n  React.useEffect(() => {\n    queryCaches.push(cache)\n\n    return () => {\n      // remove the cache from the active list\n      const i = queryCaches.indexOf(cache)\n      if (i >= 0) {\n        queryCaches.splice(i, 1)\n      }\n      // if the cache was created by us, we need to tear it down\n      if (queryCache == null) {\n        cache.clear()\n      }\n    }\n  }, [cache, queryCache])\n\n  return (\n    <queryCacheContext.Provider value={cache}>\n      {children}\n    </queryCacheContext.Provider>\n  )\n}\n\nconst actionInit = {}\nconst actionFailed = {}\nconst actionMarkStale = {}\nconst actionMarkGC = {}\nconst actionFetch = {}\nconst actionSuccess = {}\nconst actionError = {}\nconst actionSetState = {}\n\nexport function makeQueryCache() {\n  const listeners = []\n\n  const cache = {\n    queries: {},\n    isFetching: 0,\n  }\n\n  const notifyGlobalListeners = () => {\n    cache.isFetching = Object.values(cache.queries).reduce(\n      (acc, query) => (query.state.isFetching ? acc + 1 : acc),\n      0\n    )\n    listeners.forEach(d => d(cache))\n  }\n\n  cache.subscribe = cb => {\n    listeners.push(cb)\n    return () => {\n      listeners.splice(listeners.indexOf(cb), 1)\n    }\n  }\n\n  cache.clear = () => {\n    Object.values(cache.queries).forEach(query => query.clear())\n    cache.queries = {}\n    notifyGlobalListeners()\n  }\n\n  const findQueries = (predicate, { exact } = {}) => {\n    if (typeof predicate !== 'function') {\n      const [\n        queryHash,\n        queryKey,\n      ] = defaultConfigRef.current.queryKeySerializerFn(predicate)\n      predicate = d =>\n        exact ? d.queryHash === queryHash : deepIncludes(d.queryKey, queryKey)\n    }\n\n    return Object.values(cache.queries).filter(predicate)\n  }\n\n  cache.getQueries = findQueries\n\n  cache.getQuery = queryKey => findQueries(queryKey, { exact: true })[0]\n\n  cache.getQueryData = queryKey => cache.getQuery(queryKey)?.state.data\n\n  cache.removeQueries = (predicate, { exact } = {}) => {\n    const foundQueries = findQueries(predicate, { exact })\n\n    foundQueries.forEach(query => {\n      clearTimeout(query.staleTimeout)\n      delete cache.queries[query.queryHash]\n    })\n\n    if (foundQueries.length) {\n      notifyGlobalListeners()\n    }\n  }\n\n  cache.cancelQueries = (predicate, { exact } = {}) => {\n    const foundQueries = findQueries(predicate, { exact })\n\n    foundQueries.forEach(query => {\n      query.cancel()\n    })\n\n    if (foundQueries.length) {\n      notifyGlobalListeners()\n    }\n  }\n\n  cache.refetchQueries = async (\n    predicate,\n    { exact, throwOnError, force } = {}\n  ) => {\n    const foundQueries =\n      predicate === true\n        ? Object.values(cache.queries)\n        : findQueries(predicate, { exact })\n\n    try {\n      return await Promise.all(\n        foundQueries.map(query => query.fetch({ force }))\n      )\n    } catch (err) {\n      if (throwOnError) {\n        throw err\n      }\n    }\n  }\n\n  cache._buildQuery = (userQueryKey, queryVariables, queryFn, config) => {\n    let [queryHash, queryKey] = config.queryKeySerializerFn(userQueryKey)\n\n    let query = cache.queries[queryHash]\n\n    if (query) {\n      Object.assign(query, { queryVariables, queryFn })\n      query.config = { ...query.config, ...config }\n    } else {\n      query = makeQuery({\n        cache,\n        queryKey,\n        queryHash,\n        queryVariables,\n        queryFn,\n        config,\n      })\n\n      // If the query started with data, schedule\n      // a stale timeout\n      if (!isServer && query.state.data) {\n        query.scheduleStaleTimeout()\n\n        // Simulate a query healing process\n        query.heal()\n        // Schedule for garbage collection in case\n        // nothing subscribes to this query\n        query.scheduleGarbageCollection()\n      }\n\n      if (query.queryHash) {\n        if (!isServer) {\n          cache.queries[queryHash] = query\n          // Here, we setTimeout so as to not trigger\n          // any setState's in parent components in the\n          // middle of the render phase.\n          setTimeout(() => {\n            notifyGlobalListeners()\n          })\n        }\n      }\n    }\n\n    return query\n  }\n\n  cache.prefetchQuery = async (...args) => {\n    let [\n      queryKey,\n      queryVariables,\n      queryFn,\n      { force, ...config },\n    ] = getQueryArgs(args)\n\n    config = {\n      ...defaultConfigRef.current,\n      ...config,\n    }\n\n    const query = cache._buildQuery(queryKey, queryVariables, queryFn, config)\n\n    // Don't prefetch queries that are fresh, unless force is passed\n    if (query.state.isStale || force) {\n      // Trigger a fetch and return the promise\n      try {\n        const res = await query.fetch({ force })\n        query.wasPrefetched = true\n        return res\n      } catch (err) {\n        if (config.throwOnError) {\n          throw err\n        }\n      }\n    }\n\n    return query.state.data\n  }\n\n  cache.setQueryData = (queryKey, updater, { exact, ...config } = {}) => {\n    let queries = findQueries(queryKey, { exact })\n\n    if (!queries.length && typeof queryKey !== 'function') {\n      queries = [\n        cache._buildQuery(queryKey, undefined, () => Promise.resolve(), {\n          ...defaultConfigRef.current,\n          ...config,\n        }),\n      ]\n    }\n\n    queries.forEach(d => d.setData(updater))\n  }\n\n  function makeQuery(options) {\n    const queryCache = options.cache\n    const reducer = options.config.queryReducer || defaultQueryReducer\n\n    const noQueryHash = typeof options.queryHash === 'undefined'\n\n    const initialData =\n      typeof options.config.initialData === 'function'\n        ? options.config.initialData()\n        : options.config.initialData\n\n    const hasInitialData = typeof initialData !== 'undefined'\n\n    const isStale = noQueryHash ? true : !hasInitialData\n\n    const manual = options.config.manual\n\n    const initialStatus =\n      noQueryHash || manual || hasInitialData ? statusSuccess : statusLoading\n\n    const query = {\n      ...options,\n      instances: [],\n      state: reducer(undefined, {\n        type: actionInit,\n        initialStatus,\n        initialData,\n        hasInitialData,\n        isStale,\n        manual,\n      }),\n    }\n\n    const dispatch = action => {\n      query.state = reducer(query.state, action)\n      query.instances.forEach(d => d.onStateUpdate(query.state))\n      notifyGlobalListeners()\n    }\n\n    query.scheduleStaleTimeout = () => {\n      if (query.config.staleTime === Infinity) {\n        return\n      }\n      query.staleTimeout = setTimeout(() => {\n        if (queryCache.getQuery(query.queryKey)) {\n          dispatch({ type: actionMarkStale })\n        }\n      }, query.config.staleTime)\n    }\n\n    query.scheduleGarbageCollection = () => {\n      if (query.config.cacheTime === Infinity) {\n        return\n      }\n      dispatch({ type: actionMarkGC })\n      query.cacheTimeout = setTimeout(\n        () => {\n          cache.removeQueries(\n            d =>\n              d.state.markedForGarbageCollection &&\n              d.queryHash === query.queryHash\n          )\n        },\n        typeof query.state.data === 'undefined' &&\n          query.state.status !== 'error'\n          ? 0\n          : query.config.cacheTime\n      )\n    }\n\n    query.heal = () => {\n      // Stop the query from being garbage collected\n      clearTimeout(query.cacheTimeout)\n\n      // Mark the query as not cancelled\n      query.cancelled = null\n    }\n\n    query.cancel = () => {\n      query.cancelled = cancelledError\n\n      if (query.cancelPromises) {\n        query.cancelPromises()\n      }\n\n      delete query.promise\n\n      notifyGlobalListeners()\n    }\n\n    query.updateInstance = instance => {\n      let found = query.instances.find(d => d.id === instance.id)\n\n      if (found) {\n        Object.assign(found, instance)\n      } else {\n        found = {\n          onStateUpdate: noop,\n          ...instance,\n        }\n        query.instances.push(instance)\n      }\n    }\n\n    query.subscribe = instanceId => {\n      query.heal()\n\n      // Return the unsubscribe function\n      return () => {\n        query.instances = query.instances.filter(d => d.id !== instanceId)\n\n        if (!query.instances.length) {\n          query.cancel()\n\n          // Schedule garbage collection\n          query.scheduleGarbageCollection()\n        }\n      }\n    }\n\n    // Set up the fetch function\n    const tryFetchData = async (queryFn, ...args) => {\n      try {\n        // Perform the query\n        const promise = queryFn(...query.config.queryFnParamsFilter(args))\n\n        query.cancelPromises = () => promise.cancel?.()\n\n        const data = await promise\n        delete query.shouldContinueRetryOnFocus\n\n        delete query.cancelPromises\n        if (query.cancelled) throw query.cancelled\n\n        return data\n      } catch (error) {\n        delete query.cancelPromises\n        if (query.cancelled) throw query.cancelled\n\n        // If we fail, increase the failureCount\n        dispatch({ type: actionFailed })\n\n        // Do we need to retry the request?\n        if (\n          query.config.retry === true ||\n          query.state.failureCount <= query.config.retry ||\n          (typeof query.config.retry === 'function' &&\n            query.config.retry(query.state.failureCount, error))\n        ) {\n          // Only retry if the document is visible\n          if (!isDocumentVisible()) {\n            // set this flag to continue fetch retries on focus\n            query.shouldContinueRetryOnFocus = true\n            return new Promise(noop)\n          }\n\n          delete query.shouldContinueRetryOnFocus\n\n          // Determine the retryDelay\n          const delay = functionalUpdate(\n            query.config.retryDelay,\n            query.state.failureCount\n          )\n\n          // Return a new promise with the retry\n          return await new Promise((resolve, reject) => {\n            // Keep track of the retry timeout\n            setTimeout(async () => {\n              if (query.cancelled) return reject(query.cancelled)\n\n              try {\n                const data = await tryFetchData(queryFn, ...args)\n                if (query.cancelled) return reject(query.cancelled)\n                resolve(data)\n              } catch (error) {\n                if (query.cancelled) return reject(query.cancelled)\n                reject(error)\n              }\n            }, delay)\n          })\n        }\n\n        throw error\n      }\n    }\n\n    query.fetch = async ({ force, __queryFn = query.queryFn } = {}) => {\n      // Don't refetch fresh queries that don't have a queryHash\n\n      if (!query.queryHash || (!query.state.isStale && !force)) {\n        return\n      }\n\n      // Create a new promise for the query cache if necessary\n      if (!query.promise) {\n        query.promise = (async () => {\n          // If there are any retries pending for this query, kill them\n          query.cancelled = null\n\n          const callbackInstances = [...query.instances]\n\n          if (query.wasSuspended) {\n            callbackInstances.unshift(query.suspenseInstance)\n          }\n\n          try {\n            // Set up the query refreshing state\n            dispatch({ type: actionFetch })\n\n            // Try to fetch\n            let data = await tryFetchData(\n              __queryFn,\n              ...query.queryKey,\n              ...query.queryVariables\n            )\n\n            query.setData(old =>\n              query.config.isDataEqual(old, data) ? old : data\n            )\n\n            callbackInstances.forEach(\n              instance =>\n                instance.onSuccess && instance.onSuccess(query.state.data)\n            )\n\n            callbackInstances.forEach(\n              instance =>\n                instance.onSettled && instance.onSettled(query.state.data, null)\n            )\n\n            delete query.promise\n\n            return data\n          } catch (error) {\n            dispatch({\n              type: actionError,\n              cancelled: error === query.cancelled,\n              error,\n            })\n\n            delete query.promise\n\n            if (error !== query.cancelled) {\n              callbackInstances.forEach(\n                instance => instance.onError && instance.onError(error)\n              )\n\n              callbackInstances.forEach(\n                instance =>\n                  instance.onSettled && instance.onSettled(undefined, error)\n              )\n\n              throw error\n            }\n          }\n        })()\n      }\n\n      return query.promise\n    }\n\n    query.setState = updater => dispatch({ type: actionSetState, updater })\n\n    query.setData = updater => {\n      // Set data and mark it as cached\n      dispatch({ type: actionSuccess, updater })\n\n      // Schedule a fresh invalidation!\n      clearTimeout(query.staleTimeout)\n      query.scheduleStaleTimeout()\n    }\n\n    query.clear = () => {\n      clearTimeout(query.staleTimeout)\n      clearTimeout(query.cacheTimeout)\n      query.cancel()\n    }\n\n    return query\n  }\n\n  return cache\n}\n\nexport function defaultQueryReducer(state, action) {\n  switch (action.type) {\n    case actionInit:\n      return {\n        status: action.initialStatus,\n        error: null,\n        isFetching:\n          action.hasInitialData || action.manual\n            ? false\n            : action.initialStatus === 'loading',\n        canFetchMore: false,\n        failureCount: 0,\n        isStale: action.isStale,\n        markedForGarbageCollection: false,\n        data: action.initialData,\n        updatedAt: action.hasInitialData ? Date.now() : 0,\n      }\n    case actionFailed:\n      return {\n        ...state,\n        failureCount: state.failureCount + 1,\n      }\n    case actionMarkStale:\n      return {\n        ...state,\n        isStale: true,\n      }\n    case actionMarkGC: {\n      return {\n        ...state,\n        markedForGarbageCollection: true,\n      }\n    }\n    case actionFetch:\n      return {\n        ...state,\n        status: state.status === statusError ? statusLoading : state.status,\n        isFetching: true,\n        failureCount: 0,\n      }\n    case actionSuccess:\n      return {\n        ...state,\n        status: statusSuccess,\n        data: functionalUpdate(action.updater, state.data),\n        error: null,\n        isStale: false,\n        isFetching: false,\n        canFetchMore: action.canFetchMore,\n        updatedAt: Date.now(),\n        failureCount: 0,\n      }\n    case actionError:\n      return {\n        ...state,\n        isFetching: false,\n        isStale: true,\n        ...(!action.cancelled && {\n          status: statusError,\n          error: action.error,\n        }),\n      }\n    case actionSetState:\n      return functionalUpdate(action.updater, state)\n    default:\n      throw new Error()\n  }\n}\n","import { isOnline, isDocumentVisible, Console, isServer } from './utils'\nimport { defaultConfigRef } from './config'\nimport { queryCaches } from './queryCache'\n\nconst visibilityChangeEvent = 'visibilitychange'\nconst focusEvent = 'focus'\n\nconst onWindowFocus = () => {\n  const { refetchAllOnWindowFocus } = defaultConfigRef.current\n\n  if (isDocumentVisible() && isOnline()) {\n    queryCaches.forEach(queryCache =>\n      queryCache\n        .refetchQueries(query => {\n          if (!query.instances.length) {\n            return false\n          }\n\n          if (query.config.manual === true) {\n            return false\n          }\n\n          if (query.shouldContinueRetryOnFocus) {\n            // delete promise, so `fetch` will create new one\n            delete query.promise\n            return true\n          }\n\n          if (typeof query.config.refetchOnWindowFocus === 'undefined') {\n            return refetchAllOnWindowFocus\n          } else {\n            return query.config.refetchOnWindowFocus\n          }\n        })\n        .catch(Console.error)\n    )\n  }\n}\n\nlet removePreviousHandler\n\nexport function setFocusHandler(callback) {\n  // Unsub the old watcher\n  if (removePreviousHandler) {\n    removePreviousHandler()\n  }\n  // Sub the new watcher\n  removePreviousHandler = callback(onWindowFocus)\n}\n\nsetFocusHandler(handleFocus => {\n  // Listen to visibillitychange and focus\n  if (!isServer && window?.addEventListener) {\n    window.addEventListener(visibilityChangeEvent, handleFocus, false)\n    window.addEventListener(focusEvent, handleFocus, false)\n\n    return () => {\n      // Be sure to unsubscribe if a new handler is set\n      window.removeEventListener(visibilityChangeEvent, handleFocus)\n      window.removeEventListener(focusEvent, handleFocus)\n    }\n  }\n})\n","import React from 'react'\n\n//\n\nimport { useConfigContext } from './config'\nimport {\n  statusIdle,\n  statusLoading,\n  statusSuccess,\n  statusError,\n  useGetLatest,\n  Console,\n  uid,\n  useMountedCallback,\n  noop,\n} from './utils'\n\nconst getDefaultState = () => ({\n  status: statusIdle,\n  data: undefined,\n  error: null,\n})\n\nconst actionReset = {}\nconst actionLoading = {}\nconst actionResolve = {}\nconst actionReject = {}\n\nfunction mutationReducer(state, action) {\n  if (action.type === actionReset) {\n    return getDefaultState()\n  }\n  if (action.type === actionLoading) {\n    return {\n      status: statusLoading,\n    }\n  }\n  if (action.type === actionResolve) {\n    return {\n      status: statusSuccess,\n      data: action.data,\n    }\n  }\n  if (action.type === actionReject) {\n    return {\n      status: statusError,\n      error: action.error,\n    }\n  }\n  throw new Error()\n}\n\nexport function useMutation(mutationFn, config = {}) {\n  const [state, unsafeDispatch] = React.useReducer(\n    mutationReducer,\n    null,\n    getDefaultState\n  )\n\n  const dispatch = useMountedCallback(unsafeDispatch)\n\n  const getMutationFn = useGetLatest(mutationFn)\n\n  const getConfig = useGetLatest({\n    ...useConfigContext(),\n    ...config,\n  })\n\n  const latestMutationRef = React.useRef()\n\n  const mutate = React.useCallback(\n    async (\n      variables,\n      { onSuccess = noop, onError = noop, onSettled = noop, throwOnError } = {}\n    ) => {\n      const config = getConfig()\n\n      const mutationId = uid()\n      latestMutationRef.current = mutationId\n\n      const isLatest = () => latestMutationRef.current === mutationId\n\n      dispatch({ type: actionLoading })\n\n      let snapshotValue\n\n      try {\n        snapshotValue = await config.onMutate(variables)\n\n        let data\n\n        if (isLatest()) {\n          data = await getMutationFn()(variables)\n        }\n\n        if (isLatest()) {\n          await onSuccess(data, variables)\n        }\n\n        if (isLatest()) {\n          await config.onSuccess(data, variables)\n        }\n\n        if (isLatest()) {\n          await onSettled(data, null, variables)\n        }\n\n        if (isLatest()) {\n          await config.onSettled(data, null, variables)\n        }\n\n        if (isLatest()) {\n          dispatch({ type: actionResolve, data })\n        }\n\n        return data\n      } catch (error) {\n        if (isLatest()) {\n          Console.error(error)\n          await onError(error, variables, snapshotValue)\n        }\n\n        if (isLatest()) {\n          await config.onError(error, variables, snapshotValue)\n        }\n\n        if (isLatest()) {\n          await onSettled(undefined, error, variables, snapshotValue)\n        }\n\n        if (isLatest()) {\n          await config.onSettled(undefined, error, variables, snapshotValue)\n        }\n\n        if (isLatest()) {\n          dispatch({ type: actionReject, error })\n\n          if (throwOnError ?? config.throwOnError) {\n            throw error\n          }\n        }\n      }\n    },\n    [dispatch, getConfig, getMutationFn]\n  )\n\n  const reset = React.useCallback(() => dispatch({ type: actionReset }), [\n    dispatch,\n  ])\n\n  React.useEffect(() => {\n    if (getConfig().useErrorBoundary && state.error) {\n      throw state.error\n    }\n  }, [getConfig, state.error])\n\n  return [mutate, { ...state, reset }]\n}\n","import React from 'react'\n\n//\n\nimport { useQueryCache } from './queryCache'\nimport { useConfigContext } from './config'\nimport {\n  useUid,\n  isDocumentVisible,\n  Console,\n  useGetLatest,\n  useMountedCallback,\n} from './utils'\n\nexport function useBaseQuery(queryKey, queryVariables, queryFn, config = {}) {\n  const instanceId = useUid()\n\n  config = {\n    ...useConfigContext(),\n    ...config,\n  }\n\n  const queryCache = useQueryCache()\n\n  const queryRef = React.useRef()\n\n  const newQuery = queryCache._buildQuery(\n    queryKey,\n    queryVariables,\n    queryFn,\n    config\n  )\n\n  const useCachedQuery =\n    queryRef.current &&\n    typeof queryRef.current.queryHash === 'undefined' &&\n    typeof newQuery.queryHash === 'undefined'\n\n  // Do not use new query with undefined queryHash, if previous query also had undefined queryHash.\n  // Otherwise this will cause infinite loop.\n  if (!useCachedQuery) {\n    queryRef.current = newQuery\n  }\n\n  const query = queryRef.current\n\n  const [, unsafeRerender] = React.useState()\n\n  const rerender = useMountedCallback(unsafeRerender)\n\n  const getLatestConfig = useGetLatest(config)\n  const refetch = React.useCallback(\n    async ({ throwOnError, ...rest } = {}) => {\n      try {\n        return await query.fetch(rest)\n      } catch (err) {\n        if (throwOnError) {\n          throw err\n        }\n      }\n    },\n    [query]\n  )\n\n  query.suspenseInstance = {\n    onSuccess: data => getLatestConfig().onSuccess(data),\n    onError: err => getLatestConfig().onError(err),\n    onSettled: (data, err) => getLatestConfig().onSettled(data, err),\n  }\n\n  // After mount, subscribe to the query\n  React.useEffect(() => {\n    // Update the instance to the query again, but not as a placeholder\n    query.updateInstance({\n      id: instanceId,\n      onStateUpdate: () => rerender({}),\n      onSuccess: data => getLatestConfig().onSuccess(data),\n      onError: err => getLatestConfig().onError(err),\n      onSettled: (data, err) => getLatestConfig().onSettled(data, err),\n    })\n\n    return query.subscribe(instanceId)\n  }, [getLatestConfig, instanceId, query, rerender])\n\n  React.useEffect(() => {\n    // Perform the initial fetch for this query if necessary\n    if (\n      !getLatestConfig().manual && // Don't auto fetch if config is set to manual query\n      !query.wasPrefetched && // Don't double fetch for prefetched queries\n      !query.wasSuspended && // Don't double fetch for suspense\n      query.state.isStale && // Only refetch if stale\n      (getLatestConfig().refetchOnMount || query.instances.length === 1)\n    ) {\n      refetch().catch(Console.error)\n    }\n\n    query.wasPrefetched = false\n    query.wasSuspended = false\n  }, [getLatestConfig, query, refetch])\n\n  // Handle refetch interval\n  React.useEffect(() => {\n    const query = queryRef.current\n    if (\n      config.refetchInterval &&\n      (!query.currentRefetchInterval ||\n        // shorter interval should override previous one\n        config.refetchInterval < query.currentRefetchInterval)\n    ) {\n      query.currentRefetchInterval = config.refetchInterval\n      clearInterval(query.refetchIntervalId)\n      query.refetchIntervalId = setInterval(() => {\n        if (isDocumentVisible() || config.refetchIntervalInBackground) {\n          refetch().catch(Console.error)\n        }\n      }, config.refetchInterval)\n\n      return () => {\n        clearInterval(query.refetchIntervalId)\n        delete query.refetchIntervalId\n        delete query.currentRefetchInterval\n      }\n    }\n  }, [config.refetchInterval, config.refetchIntervalInBackground, refetch])\n\n  return {\n    ...query.state,\n    config,\n    query,\n    refetch,\n  }\n}\n","import React from 'react'\n\n//\n\nimport { useBaseQuery } from './useBaseQuery'\nimport { getQueryArgs, useGetLatest, handleSuspense } from './utils'\n\nexport function useInfiniteQuery(...args) {\n  const queryInfoRef = React.useRef()\n  let [queryKey, queryVariables, queryFn, config = {}] = getQueryArgs(args)\n\n  const { getFetchMore } = config\n  const getGetFetchMore = useGetLatest(getFetchMore)\n\n  // The default queryFn will query all pages and map them together\n  const originalQueryFn = queryFn\n\n  queryFn = async () => {\n    const data = []\n    const pageVariables = [...queryInfoRef.current.query.pageVariables]\n    const rebuiltPageVariables = []\n\n    do {\n      const args = pageVariables.shift()\n\n      if (!data.length) {\n        // the first page query doesn't need to be rebuilt\n        data.push(await originalQueryFn(...args))\n        rebuiltPageVariables.push(args)\n      } else {\n        // get an up-to-date cursor based on the previous data set\n        const nextCursor = getGetFetchMore()(data[data.length - 1], data)\n\n        // break early if there's no next cursor\n        // otherwise we'll start from the beginning\n        // which will cause unwanted duplication\n        if (!nextCursor) {\n          break\n        }\n\n        const pageArgs = [\n          // remove the last argument (the previously saved cursor)\n          ...args.slice(0, -1),\n          nextCursor,\n        ]\n\n        data.push(await originalQueryFn(...pageArgs))\n        rebuiltPageVariables.push(pageArgs)\n      }\n    } while (pageVariables.length)\n\n    queryInfoRef.current.query.canFetchMore = getGetFetchMore()(\n      data[data.length - 1],\n      data\n    )\n    queryInfoRef.current.query.pageVariables = rebuiltPageVariables\n\n    return data\n  }\n\n  const queryInfo = useBaseQuery(queryKey, queryVariables, queryFn, config)\n\n  if (\n    typeof queryInfo.query.canFetchMore === 'undefined' &&\n    typeof queryInfo.data !== 'undefined'\n  ) {\n    queryInfo.query.canFetchMore = getGetFetchMore()(\n      queryInfo.data[queryInfo.data.length - 1],\n      queryInfo.data\n    )\n  }\n\n  queryInfoRef.current = queryInfo\n\n  let {\n    refetch,\n    data = [],\n    query: { canFetchMore },\n  } = queryInfo\n\n  // Here we seed the pageVariabes for the query\n  if (!queryInfo.query.pageVariables) {\n    queryInfo.query.pageVariables = [\n      [...queryInfo.query.queryKey, ...queryInfo.query.queryVariables],\n    ]\n  }\n\n  const fetchMore = React.useCallback(\n    (fetchMoreInfo = queryInfoRef.current.query.canFetchMore) =>\n      queryInfoRef.current.query.canFetchMore\n        ? refetch({\n            force: true,\n            __queryFn: async (...args) => {\n              try {\n                queryInfoRef.current.query.setState(old => ({\n                  ...old,\n                  isFetchingMore: true,\n                }))\n\n                const newArgs = [...args, fetchMoreInfo]\n                queryInfoRef.current.query.pageVariables.push(newArgs)\n\n                const data = [\n                  ...queryInfoRef.current.data,\n                  await originalQueryFn(...newArgs),\n                ]\n\n                queryInfoRef.current.query.canFetchMore = getGetFetchMore()(\n                  data[data.length - 1],\n                  data\n                )\n\n                return data\n              } finally {\n                queryInfoRef.current.query.setState(old => ({\n                  ...old,\n                  isFetchingMore: false,\n                }))\n              }\n            },\n          })\n        : void 0,\n    [getGetFetchMore, originalQueryFn, refetch]\n  )\n\n  handleSuspense(queryInfo)\n\n  return {\n    ...queryInfo,\n    data,\n    canFetchMore,\n    fetchMore,\n  }\n}\n","import React from 'react'\n\nimport { useQueryCache } from './queryCache'\n\nexport function useIsFetching() {\n  const queryCache = useQueryCache()\n  const [state, setState] = React.useState({})\n\n  React.useEffect(() => {\n    return queryCache.subscribe(() => setState({}))\n  }, [])\n\n  return React.useMemo(() => state && queryCache.isFetching, [state])\n}\n","import React from 'react'\n\n//\n\nimport { useBaseQuery } from './useBaseQuery'\nimport { getQueryArgs, handleSuspense } from './utils'\n\nexport function usePaginatedQuery(...args) {\n  let [queryKey, queryVariables, queryFn, config = {}] = getQueryArgs(args)\n\n  const lastDataRef = React.useRef()\n\n  if (!queryKey) {\n    lastDataRef.current = undefined\n  }\n\n  // If latestData is set, don't use initialData\n  if (typeof lastDataRef.current !== 'undefined') {\n    delete config.initialData\n  }\n\n  const query = useBaseQuery(queryKey, queryVariables, queryFn, config)\n\n  let { data: latestData, status } = query\n\n  React.useEffect(() => {\n    if (status === 'success' && typeof latestData !== 'undefined') {\n      lastDataRef.current = latestData\n    }\n  }, [latestData, status])\n\n  let resolvedData = latestData\n\n  if (typeof resolvedData === 'undefined') {\n    resolvedData = lastDataRef.current\n  }\n\n  if (typeof resolvedData !== 'undefined') {\n    status = 'success'\n  }\n\n  const paginatedQuery = {\n    ...query,\n    resolvedData,\n    latestData,\n    status,\n  }\n\n  handleSuspense(paginatedQuery)\n\n  return paginatedQuery\n}\n","import { useBaseQuery } from './useBaseQuery'\nimport { getQueryArgs, handleSuspense } from './utils'\n\nexport function useQuery(...args) {\n  const query = useBaseQuery(...getQueryArgs(args))\n\n  handleSuspense(query)\n\n  return query\n}\n"],"names":["_uid","uid","cancelledError","isServer","window","noop","Console","console","error","warn","log","useGetLatest","obj","ref","React","useRef","current","useCallback","functionalUpdate","updater","old","stableStringifyReplacer","_","value","isObject","Object","assign","keys","sort","map","key","stableStringify","JSON","stringify","a","Array","isArray","deepIncludes","b","some","isDocumentVisible","document","undefined","visibilityState","getQueryArgs","args","hasOwnProperty","queryKey","variables","queryFn","config","Error","useMountedCallback","callback","mounted","handleSuspense","queryInfo","suspense","useErrorBoundary","status","setTimeout","query","state","wasSuspended","refetch","configContext","createContext","DEFAULTS","retry","retryDelay","attemptIndex","Math","min","staleTime","cacheTime","refetchAllOnWindowFocus","refetchInterval","queryKeySerializerFn","defaultQueryKeySerializerFn","queryHash","parse","queryFnParamsFilter","d","throwOnError","onMutate","onSuccess","onError","onSettled","refetchOnMount","isDataEqual","deepEqual","length","i","valueOf","prototype","call","defaultConfigRef","useConfigContext","useContext","then","direct","Promise","resolve","body","recover","result","e","f","arguments","apply","this","reject","queryCache","makeQueryCache","queryCacheContext","queryCaches","useQueryCache","actionInit","actionFailed","actionMarkStale","actionMarkGC","actionFetch","actionSuccess","actionError","actionSetState","listeners","cache","queries","isFetching","notifyGlobalListeners","values","reduce","acc","forEach","subscribe","cb","push","splice","indexOf","clear","findQueries","predicate","exact","filter","getQueries","getQuery","getQueryData","_cache$getQuery","data","removeQueries","foundQueries","clearTimeout","staleTimeout","cancelQueries","cancel","refetchQueries","force","all","fetch","err","_buildQuery","userQueryKey","queryVariables","options","reducer","queryReducer","defaultQueryReducer","noQueryHash","initialData","hasInitialData","isStale","manual","instances","type","initialStatus","dispatch","action","onStateUpdate","scheduleStaleTimeout","Infinity","scheduleGarbageCollection","cacheTimeout","markedForGarbageCollection","heal","cancelled","cancelPromises","promise","updateInstance","instance","found","find","id","instanceId","tryFetchData","shouldContinueRetryOnFocus","failureCount","delay","__queryFn","_async","callbackInstances","unshift","suspenseInstance","setData","setState","makeQuery","prefetchQuery","res","wasPrefetched","setQueryData","canFetchMore","updatedAt","Date","now","removePreviousHandler","onWindowFocus","navigator","onLine","refetchOnWindowFocus","catch","setFocusHandler","_await","handleFocus","_window","addEventListener","removeEventListener","getDefaultState","_empty","actionReset","_awaitIgnored","actionLoading","_invoke","actionResolve","actionReject","mutationReducer","useBaseQuery","queryRef","newQuery","rerender","useState","getLatestConfig","rest","useEffect","currentRefetchInterval","clearInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","pact","s","o","_settle","bind","v","observer","_Pact","onFulfilled","onRejected","_this","thenable","test","awaitBody","_isSettledPact","shouldContinue","_resumeAfterBody","_resumeAfterTest","thrown","finalizer","children","useMemo","Provider","configContextValue","newConfig","c","queryInfoRef","getFetchMore","getGetFetchMore","originalQueryFn","pageVariables","rebuiltPageVariables","shift","nextCursor","pageArgs","slice","fetchMore","fetchMoreInfo","isFetchingMore","newArgs","mutationFn","useReducer","getMutationFn","getConfig","latestMutationRef","mutate","mutationId","snapshotValue","isLatest","reset","lastDataRef","latestData","resolvedData","paginatedQuery"],"mappings":"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"}