{"version":3,"file":"react-query.production.min.js","sources":["../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/utils.js","../src/config.js","../src/queryCache.js","../src/setFocusHandler.js","../src/useMutation.js","../src/useBaseQuery.js","../src/useInfiniteQuery.js","../src/useIsFetching.js","../src/usePaginatedQuery.js","../src/useQuery.js"],"sourcesContent":["// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import React from 'react'\n\n//\n\nexport const statusIdle = 'idle'\nexport const statusLoading = 'loading'\nexport const statusError = 'error'\nexport const statusSuccess = 'success'\n\nlet _uid = 0\nexport const uid = () => _uid++\nexport const cancelledError = {}\nexport let globalStateListeners = []\nexport const isServer = typeof window === 'undefined'\nexport const noop = () => {}\nexport const identity = d => d\nexport let Console = console || { error: noop, warn: noop, log: noop }\n\nexport function useUid() {\n  const ref = React.useRef(null)\n\n  if (ref.current === null) {\n    ref.current = uid()\n  }\n\n  return ref.current\n}\n\nexport function setConsole(c) {\n  Console = c\n}\n\nexport function useGetLatest(obj) {\n  const ref = React.useRef()\n  ref.current = obj\n\n  return React.useCallback(() => ref.current, [])\n}\n\nexport function functionalUpdate(updater, old) {\n  return typeof updater === 'function' ? updater(old) : updater\n}\n\nexport function stableStringifyReplacer(_, value) {\n  return isObject(value)\n    ? Object.assign(\n        {},\n        ...Object.keys(value)\n          .sort()\n          .map(key => ({\n            [key]: value[key],\n          }))\n      )\n    : value\n}\n\nexport function stableStringify(obj) {\n  return JSON.stringify(obj, stableStringifyReplacer)\n}\n\nexport function isObject(a) {\n  return a && typeof a === 'object' && !Array.isArray(a)\n}\n\nexport function deepIncludes(a, b) {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (typeof a === 'object') {\n    return !Object.keys(b).some(key => !deepIncludes(a[key], b[key]))\n  }\n\n  return false\n}\n\nexport function isDocumentVisible() {\n  return (\n    typeof document === 'undefined' ||\n    document.visibilityState === undefined ||\n    document.visibilityState === 'visible' ||\n    document.visibilityState === 'prerender'\n  )\n}\n\nexport function isOnline() {\n  return navigator.onLine === undefined || navigator.onLine\n}\n\nexport function getQueryArgs(args) {\n  if (isObject(args[0])) {\n    if (\n      args[0].hasOwnProperty('queryKey') &&\n      args[0].hasOwnProperty('queryFn')\n    ) {\n      const { queryKey, variables = [], queryFn, config = {} } = args[0]\n      return [queryKey, variables, queryFn, config]\n    } else {\n      throw new Error('queryKey and queryFn keys are required.')\n    }\n  }\n\n  if (typeof args[2] === 'function') {\n    const [queryKey, variables = [], queryFn, config = {}] = args\n    return [queryKey, variables, queryFn, config]\n  }\n\n  const [queryKey, queryFn, config = {}] = args\n\n  return [queryKey, [], queryFn, config]\n}\n\nexport function useMountedCallback(callback) {\n  const mounted = React.useRef(false)\n  React[isServer ? 'useEffect' : 'useLayoutEffect'](() => {\n    mounted.current = true\n    return () => (mounted.current = false)\n  }, [])\n  return React.useCallback(\n    (...args) => (mounted.current ? callback(...args) : void 0),\n    [callback]\n  )\n}\n\nexport function handleSuspense(queryInfo) {\n  if (queryInfo.config.suspense || queryInfo.config.useErrorBoundary) {\n    if (queryInfo.status === statusError) {\n      setTimeout(() => {\n        queryInfo.query.state.status = 'loading'\n      })\n      throw queryInfo.error\n    }\n  }\n\n  if (queryInfo.config.suspense) {\n    if (queryInfo.status === statusLoading) {\n      queryInfo.query.wasSuspended = true\n      throw queryInfo.refetch()\n    }\n  }\n}\n\n// This deep-equal is directly based on https://github.com/epoberezkin/fast-deep-equal.\n// The parts for comparing any non-JSON-supported values has been removed\nexport function deepEqual(a, b) {\n  if (a === b) return true\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    var length, i, keys\n    if (Array.isArray(a)) {\n      length = a.length\n      // eslint-disable-next-line eqeqeq\n      if (length != b.length) return false\n      for (i = length; i-- !== 0; ) if (!deepEqual(a[i], b[i])) return false\n      return true\n    }\n\n    if (a.valueOf !== Object.prototype.valueOf)\n      return a.valueOf() === b.valueOf()\n\n    keys = Object.keys(a)\n    length = keys.length\n    if (length !== Object.keys(b).length) return false\n\n    for (i = length; i-- !== 0; )\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false\n\n    for (i = length; i-- !== 0; ) {\n      var key = keys[i]\n\n      if (!deepEqual(a[key], b[key])) return false\n    }\n\n    return true\n  }\n\n  // true if both NaN, false otherwise\n  // eslint-disable-next-line no-self-compare\n  return a !== a && b !== b\n}\n","import React from 'react'\nimport { noop, stableStringify, identity, deepEqual } from './utils'\n\nexport const configContext = React.createContext()\n\nconst DEFAULTS = {\n  retry: 3,\n  retryDelay: attemptIndex => Math.min(1000 * 2 ** attemptIndex, 30000),\n  staleTime: 0,\n  cacheTime: 5 * 60 * 1000,\n  refetchAllOnWindowFocus: true,\n  refetchInterval: false,\n  suspense: false,\n  queryKeySerializerFn: defaultQueryKeySerializerFn,\n  queryFnParamsFilter: identity,\n  throwOnError: false,\n  useErrorBoundary: undefined, // this will default to the suspense value\n  onMutate: noop,\n  onSuccess: noop,\n  onError: noop,\n  onSettled: noop,\n  refetchOnMount: true,\n  isDataEqual: deepEqual,\n}\n\nexport const defaultConfigRef = {\n  current: DEFAULTS,\n}\n\nexport function useConfigContext() {\n  return React.useContext(configContext) || defaultConfigRef.current\n}\n\nexport function ReactQueryConfigProvider({ config, children }) {\n  let configContextValue = React.useContext(configContext)\n\n  const newConfig = React.useMemo(() => {\n    const newConfig = {\n      ...(configContextValue || defaultConfigRef.current),\n      ...config,\n    }\n\n    // Default useErrorBoundary to the suspense value\n    if (typeof newConfig.useErrorBoundary === 'undefined') {\n      newConfig.useErrorBoundary = newConfig.suspense\n    }\n\n    return newConfig\n  }, [config, configContextValue])\n\n  React.useEffect(() => {\n    // restore previous config on unmount\n    return () => {\n      defaultConfigRef.current = { ...(configContextValue || DEFAULTS) }\n\n      // Default useErrorBoundary to the suspense value\n      if (typeof defaultConfigRef.current.useErrorBoundary === 'undefined') {\n        defaultConfigRef.current.useErrorBoundary =\n          defaultConfigRef.current.suspense\n      }\n    }\n  }, [configContextValue])\n\n  if (!configContextValue) {\n    defaultConfigRef.current = newConfig\n  }\n\n  return (\n    <configContext.Provider value={newConfig}>\n      {children}\n    </configContext.Provider>\n  )\n}\n\nexport function defaultQueryKeySerializerFn(queryKey) {\n  if (!queryKey) {\n    return []\n  }\n\n  if (typeof queryKey === 'function') {\n    try {\n      return defaultQueryKeySerializerFn(queryKey())\n    } catch {\n      return []\n    }\n  }\n\n  if (typeof queryKey === 'string') {\n    queryKey = [queryKey]\n  }\n\n  const queryHash = stableStringify(queryKey)\n  queryKey = JSON.parse(queryHash)\n\n  return [queryHash, queryKey]\n}\n","import React from 'react'\nimport {\n  isServer,\n  functionalUpdate,\n  cancelledError,\n  isDocumentVisible,\n  statusLoading,\n  statusSuccess,\n  statusError,\n  getQueryArgs,\n  deepIncludes,\n  noop,\n} from './utils'\nimport { defaultConfigRef } from './config'\n\nexport const queryCache = makeQueryCache()\n\nexport const queryCacheContext = React.createContext(queryCache)\n\nexport const queryCaches = [queryCache]\n\nexport function useQueryCache() {\n  return React.useContext(queryCacheContext)\n}\n\nexport function ReactQueryCacheProvider({ queryCache, children }) {\n  const cache = React.useMemo(() => queryCache || makeQueryCache(), [\n    queryCache,\n  ])\n\n  React.useEffect(() => {\n    queryCaches.push(cache)\n\n    return () => {\n      // remove the cache from the active list\n      const i = queryCaches.indexOf(cache)\n      if (i >= 0) {\n        queryCaches.splice(i, 1)\n      }\n      // if the cache was created by us, we need to tear it down\n      if (queryCache == null) {\n        cache.clear()\n      }\n    }\n  }, [cache, queryCache])\n\n  return (\n    <queryCacheContext.Provider value={cache}>\n      {children}\n    </queryCacheContext.Provider>\n  )\n}\n\nconst actionInit = {}\nconst actionFailed = {}\nconst actionMarkStale = {}\nconst actionMarkGC = {}\nconst actionFetch = {}\nconst actionSuccess = {}\nconst actionError = {}\nconst actionSetState = {}\n\nexport function makeQueryCache() {\n  const listeners = []\n\n  const cache = {\n    queries: {},\n    isFetching: 0,\n  }\n\n  const notifyGlobalListeners = () => {\n    cache.isFetching = Object.values(cache.queries).reduce(\n      (acc, query) => (query.state.isFetching ? acc + 1 : acc),\n      0\n    )\n    listeners.forEach(d => d(cache))\n  }\n\n  cache.subscribe = cb => {\n    listeners.push(cb)\n    return () => {\n      listeners.splice(listeners.indexOf(cb), 1)\n    }\n  }\n\n  cache.clear = () => {\n    Object.values(cache.queries).forEach(query => query.clear())\n    cache.queries = {}\n    notifyGlobalListeners()\n  }\n\n  const findQueries = (predicate, { exact } = {}) => {\n    if (typeof predicate !== 'function') {\n      const [\n        queryHash,\n        queryKey,\n      ] = defaultConfigRef.current.queryKeySerializerFn(predicate)\n      predicate = d =>\n        exact ? d.queryHash === queryHash : deepIncludes(d.queryKey, queryKey)\n    }\n\n    return Object.values(cache.queries).filter(predicate)\n  }\n\n  cache.getQueries = findQueries\n\n  cache.getQuery = queryKey => findQueries(queryKey, { exact: true })[0]\n\n  cache.getQueryData = queryKey => cache.getQuery(queryKey)?.state.data\n\n  cache.removeQueries = (predicate, { exact } = {}) => {\n    const foundQueries = findQueries(predicate, { exact })\n\n    foundQueries.forEach(query => {\n      clearTimeout(query.staleTimeout)\n      delete cache.queries[query.queryHash]\n    })\n\n    if (foundQueries.length) {\n      notifyGlobalListeners()\n    }\n  }\n\n  cache.cancelQueries = (predicate, { exact } = {}) => {\n    const foundQueries = findQueries(predicate, { exact })\n\n    foundQueries.forEach(query => {\n      query.cancel()\n    })\n\n    if (foundQueries.length) {\n      notifyGlobalListeners()\n    }\n  }\n\n  cache.refetchQueries = async (\n    predicate,\n    { exact, throwOnError, force } = {}\n  ) => {\n    const foundQueries =\n      predicate === true\n        ? Object.values(cache.queries)\n        : findQueries(predicate, { exact })\n\n    try {\n      return await Promise.all(\n        foundQueries.map(query => query.fetch({ force }))\n      )\n    } catch (err) {\n      if (throwOnError) {\n        throw err\n      }\n    }\n  }\n\n  cache._buildQuery = (userQueryKey, queryVariables, queryFn, config) => {\n    let [queryHash, queryKey] = config.queryKeySerializerFn(userQueryKey)\n\n    let query = cache.queries[queryHash]\n\n    if (query) {\n      Object.assign(query, { queryVariables, queryFn })\n      query.config = { ...query.config, ...config }\n    } else {\n      query = makeQuery({\n        cache,\n        queryKey,\n        queryHash,\n        queryVariables,\n        queryFn,\n        config,\n      })\n\n      // If the query started with data, schedule\n      // a stale timeout\n      if (!isServer && query.state.data) {\n        query.scheduleStaleTimeout()\n\n        // Simulate a query healing process\n        query.heal()\n        // Schedule for garbage collection in case\n        // nothing subscribes to this query\n        query.scheduleGarbageCollection()\n      }\n\n      if (query.queryHash) {\n        if (!isServer) {\n          cache.queries[queryHash] = query\n          // Here, we setTimeout so as to not trigger\n          // any setState's in parent components in the\n          // middle of the render phase.\n          setTimeout(() => {\n            notifyGlobalListeners()\n          })\n        }\n      }\n    }\n\n    return query\n  }\n\n  cache.prefetchQuery = async (...args) => {\n    let [\n      queryKey,\n      queryVariables,\n      queryFn,\n      { force, ...config },\n    ] = getQueryArgs(args)\n\n    config = {\n      ...defaultConfigRef.current,\n      ...config,\n    }\n\n    const query = cache._buildQuery(queryKey, queryVariables, queryFn, config)\n\n    // Don't prefetch queries that are fresh, unless force is passed\n    if (query.state.isStale || force) {\n      // Trigger a fetch and return the promise\n      try {\n        const res = await query.fetch({ force })\n        query.wasPrefetched = true\n        return res\n      } catch (err) {\n        if (config.throwOnError) {\n          throw err\n        }\n      }\n    }\n\n    return query.state.data\n  }\n\n  cache.setQueryData = (queryKey, updater, { exact, ...config } = {}) => {\n    let queries = findQueries(queryKey, { exact })\n\n    if (!queries.length && typeof queryKey !== 'function') {\n      queries = [\n        cache._buildQuery(queryKey, undefined, () => new Promise(noop), {\n          ...defaultConfigRef.current,\n          ...config,\n        }),\n      ]\n    }\n\n    queries.forEach(d => d.setData(updater))\n  }\n\n  function makeQuery(options) {\n    const queryCache = options.cache\n    const reducer = options.config.queryReducer || defaultQueryReducer\n\n    const noQueryHash = typeof options.queryHash === 'undefined'\n\n    const initialData =\n      typeof options.config.initialData === 'function'\n        ? options.config.initialData()\n        : options.config.initialData\n\n    const hasInitialData = typeof initialData !== 'undefined'\n\n    const isStale = noQueryHash ? true : !hasInitialData\n\n    const manual = options.config.manual\n\n    const initialStatus =\n      noQueryHash || manual || hasInitialData ? statusSuccess : statusLoading\n\n    const query = {\n      ...options,\n      instances: [],\n      state: reducer(undefined, {\n        type: actionInit,\n        initialStatus,\n        initialData,\n        hasInitialData,\n        isStale,\n        manual,\n      }),\n    }\n\n    const dispatch = action => {\n      query.state = reducer(query.state, action)\n      query.instances.forEach(d => d.onStateUpdate(query.state))\n      notifyGlobalListeners()\n    }\n\n    query.scheduleStaleTimeout = () => {\n      if (query.config.staleTime === Infinity) {\n        return\n      }\n      query.staleTimeout = setTimeout(() => {\n        if (queryCache.getQuery(query.queryKey)) {\n          dispatch({ type: actionMarkStale })\n        }\n      }, query.config.staleTime)\n    }\n\n    query.scheduleGarbageCollection = () => {\n      if (query.config.cacheTime === Infinity) {\n        return\n      }\n      dispatch({ type: actionMarkGC })\n      query.cacheTimeout = setTimeout(\n        () => {\n          cache.removeQueries(\n            d =>\n              d.state.markedForGarbageCollection &&\n              d.queryHash === query.queryHash\n          )\n        },\n        typeof query.state.data === 'undefined' &&\n          query.state.status !== 'error'\n          ? 0\n          : query.config.cacheTime\n      )\n    }\n\n    query.heal = () => {\n      // Stop the query from being garbage collected\n      clearTimeout(query.cacheTimeout)\n\n      // Mark the query as not cancelled\n      query.cancelled = null\n    }\n\n    query.cancel = () => {\n      query.cancelled = cancelledError\n\n      if (query.cancelPromises) {\n        query.cancelPromises()\n      }\n\n      delete query.promise\n\n      notifyGlobalListeners()\n    }\n\n    query.updateInstance = instance => {\n      let found = query.instances.find(d => d.id === instance.id)\n\n      if (found) {\n        Object.assign(found, instance)\n      } else {\n        found = {\n          onStateUpdate: noop,\n          ...instance,\n        }\n        query.instances.push(instance)\n      }\n    }\n\n    query.subscribe = instanceId => {\n      query.heal()\n\n      // Return the unsubscribe function\n      return () => {\n        query.instances = query.instances.filter(d => d.id !== instanceId)\n\n        if (!query.instances.length) {\n          query.cancel()\n\n          // Schedule garbage collection\n          query.scheduleGarbageCollection()\n        }\n      }\n    }\n\n    // Set up the fetch function\n    const tryFetchData = async (queryFn, ...args) => {\n      try {\n        // Perform the query\n        const promise = queryFn(...query.config.queryFnParamsFilter(args))\n\n        query.cancelPromises = () => promise.cancel?.()\n\n        const data = await promise\n\n        delete query.cancelPromises\n        if (query.cancelled) throw query.cancelled\n\n        return data\n      } catch (error) {\n        delete query.cancelPromises\n        if (query.cancelled) throw query.cancelled\n\n        // If we fail, increase the failureCount\n        dispatch({ type: actionFailed })\n\n        // Do we need to retry the request?\n        if (\n          query.config.retry === true ||\n          query.state.failureCount <= query.config.retry ||\n          (typeof query.config.retry === 'function' &&\n            query.config.retry(query.state.failureCount, error))\n        ) {\n          // Only retry if the document is visible\n          if (!isDocumentVisible()) {\n            // set this flag to continue fetch retries on focus\n            query.shouldContinueRetryOnFocus = true\n            return new Promise(noop)\n          }\n\n          delete query.shouldContinueRetryOnFocus\n\n          // Determine the retryDelay\n          const delay = functionalUpdate(\n            query.config.retryDelay,\n            query.state.failureCount\n          )\n\n          // Return a new promise with the retry\n          return await new Promise((resolve, reject) => {\n            // Keep track of the retry timeout\n            setTimeout(async () => {\n              if (query.cancelled) return reject(query.cancelled)\n\n              try {\n                const data = await tryFetchData(queryFn, ...args)\n                if (query.cancelled) return reject(query.cancelled)\n                resolve(data)\n              } catch (error) {\n                if (query.cancelled) return reject(query.cancelled)\n                reject(error)\n              }\n            }, delay)\n          })\n        }\n\n        throw error\n      }\n    }\n\n    query.fetch = async ({ force, __queryFn = query.queryFn } = {}) => {\n      // Don't refetch fresh queries that don't have a queryHash\n\n      if (!query.queryHash || (!query.state.isStale && !force)) {\n        return\n      }\n\n      // Create a new promise for the query cache if necessary\n      if (!query.promise) {\n        query.promise = (async () => {\n          // If there are any retries pending for this query, kill them\n          query.cancelled = null\n\n          const callbackInstances = [...query.instances]\n\n          if (query.wasSuspended) {\n            callbackInstances.unshift(query.suspenseInstance)\n          }\n\n          try {\n            // Set up the query refreshing state\n            dispatch({ type: actionFetch })\n\n            // Try to fetch\n            let data = await tryFetchData(\n              __queryFn,\n              ...query.queryKey,\n              ...query.queryVariables\n            )\n\n            query.setData(old =>\n              query.config.isDataEqual(old, data) ? old : data\n            )\n\n            callbackInstances.forEach(\n              instance =>\n                instance.onSuccess && instance.onSuccess(query.state.data)\n            )\n\n            callbackInstances.forEach(\n              instance =>\n                instance.onSettled && instance.onSettled(query.state.data, null)\n            )\n\n            delete query.promise\n\n            return data\n          } catch (error) {\n            dispatch({\n              type: actionError,\n              cancelled: error === query.cancelled,\n              error,\n            })\n\n            delete query.promise\n\n            if (error !== query.cancelled) {\n              callbackInstances.forEach(\n                instance => instance.onError && instance.onError(error)\n              )\n\n              callbackInstances.forEach(\n                instance =>\n                  instance.onSettled && instance.onSettled(undefined, error)\n              )\n\n              throw error\n            }\n          }\n        })()\n      }\n\n      return query.promise\n    }\n\n    query.setState = updater => dispatch({ type: actionSetState, updater })\n\n    query.setData = updater => {\n      // Set data and mark it as cached\n      dispatch({ type: actionSuccess, updater })\n\n      // Schedule a fresh invalidation!\n      clearTimeout(query.staleTimeout)\n      query.scheduleStaleTimeout()\n    }\n\n    query.clear = () => {\n      clearTimeout(query.staleTimeout)\n      clearTimeout(query.cacheTimeout)\n      query.cancel()\n    }\n\n    return query\n  }\n\n  return cache\n}\n\nexport function defaultQueryReducer(state, action) {\n  switch (action.type) {\n    case actionInit:\n      return {\n        status: action.initialStatus,\n        error: null,\n        isFetching:\n          action.hasInitialData || action.manual\n            ? false\n            : action.initialStatus === 'loading',\n        canFetchMore: false,\n        failureCount: 0,\n        isStale: action.isStale,\n        markedForGarbageCollection: false,\n        data: action.initialData,\n        updatedAt: action.hasInitialData ? Date.now() : 0,\n      }\n    case actionFailed:\n      return {\n        ...state,\n        failureCount: state.failureCount + 1,\n      }\n    case actionMarkStale:\n      return {\n        ...state,\n        isStale: true,\n      }\n    case actionMarkGC: {\n      return {\n        ...state,\n        markedForGarbageCollection: true,\n      }\n    }\n    case actionFetch:\n      return {\n        ...state,\n        status: state.status === statusError ? statusLoading : state.status,\n        isFetching: true,\n        failureCount: 0,\n      }\n    case actionSuccess:\n      return {\n        ...state,\n        status: statusSuccess,\n        data: functionalUpdate(action.updater, state.data),\n        error: null,\n        isStale: false,\n        isFetching: false,\n        canFetchMore: action.canFetchMore,\n        updatedAt: Date.now(),\n        failureCount: 0,\n      }\n    case actionError:\n      return {\n        ...state,\n        isFetching: false,\n        isStale: true,\n        ...(!action.cancelled && {\n          status: statusError,\n          error: action.error,\n        }),\n      }\n    case actionSetState:\n      return functionalUpdate(action.updater, state)\n    default:\n      throw new Error()\n  }\n}\n","import { isOnline, isDocumentVisible, Console, isServer } from './utils'\nimport { defaultConfigRef } from './config'\nimport { queryCaches } from './queryCache'\n\nconst visibilityChangeEvent = 'visibilitychange'\nconst focusEvent = 'focus'\n\nconst onWindowFocus = () => {\n  const { refetchAllOnWindowFocus } = defaultConfigRef.current\n\n  if (isDocumentVisible() && isOnline()) {\n    queryCaches.forEach(queryCache =>\n      queryCache\n        .refetchQueries(query => {\n          if (!query.instances.length) {\n            return false\n          }\n\n          if (query.config.manual === true) {\n            return false\n          }\n\n          if (query.shouldContinueRetryOnFocus) {\n            // delete promise, so `fetch` will create new one\n            delete query.promise\n            return true\n          }\n\n          if (typeof query.config.refetchOnWindowFocus === 'undefined') {\n            return refetchAllOnWindowFocus\n          } else {\n            return query.config.refetchOnWindowFocus\n          }\n        })\n        .catch(Console.error)\n    )\n  }\n}\n\nlet removePreviousHandler\n\nexport function setFocusHandler(callback) {\n  // Unsub the old watcher\n  if (removePreviousHandler) {\n    removePreviousHandler()\n  }\n  // Sub the new watcher\n  removePreviousHandler = callback(onWindowFocus)\n}\n\nsetFocusHandler(handleFocus => {\n  // Listen to visibillitychange and focus\n  if (!isServer && window?.addEventListener) {\n    window.addEventListener(visibilityChangeEvent, handleFocus, false)\n    window.addEventListener(focusEvent, handleFocus, false)\n\n    return () => {\n      // Be sure to unsubscribe if a new handler is set\n      window.removeEventListener(visibilityChangeEvent, handleFocus)\n      window.removeEventListener(focusEvent, handleFocus)\n    }\n  }\n})\n","import React from 'react'\n\n//\n\nimport { useConfigContext } from './config'\nimport {\n  statusIdle,\n  statusLoading,\n  statusSuccess,\n  statusError,\n  useGetLatest,\n  Console,\n  uid,\n  useMountedCallback,\n  noop,\n} from './utils'\n\nconst getDefaultState = () => ({\n  status: statusIdle,\n  data: undefined,\n  error: null,\n})\n\nconst actionReset = {}\nconst actionLoading = {}\nconst actionResolve = {}\nconst actionReject = {}\n\nfunction mutationReducer(state, action) {\n  if (action.type === actionReset) {\n    return getDefaultState()\n  }\n  if (action.type === actionLoading) {\n    return {\n      status: statusLoading,\n    }\n  }\n  if (action.type === actionResolve) {\n    return {\n      status: statusSuccess,\n      data: action.data,\n    }\n  }\n  if (action.type === actionReject) {\n    return {\n      status: statusError,\n      error: action.error,\n    }\n  }\n  throw new Error()\n}\n\nexport function useMutation(mutationFn, config = {}) {\n  const [state, unsafeDispatch] = React.useReducer(\n    mutationReducer,\n    null,\n    getDefaultState\n  )\n\n  const dispatch = useMountedCallback(unsafeDispatch)\n\n  const getMutationFn = useGetLatest(mutationFn)\n\n  const getConfig = useGetLatest({\n    ...useConfigContext(),\n    ...config,\n  })\n\n  const latestMutationRef = React.useRef()\n\n  const mutate = React.useCallback(\n    async (\n      variables,\n      { onSuccess = noop, onError = noop, onSettled = noop, throwOnError } = {}\n    ) => {\n      const config = getConfig()\n\n      const mutationId = uid()\n      latestMutationRef.current = mutationId\n\n      const isLatest = () => latestMutationRef.current === mutationId\n\n      dispatch({ type: actionLoading })\n\n      let snapshotValue\n\n      try {\n        snapshotValue = await config.onMutate(variables)\n\n        let data\n\n        if (isLatest()) {\n          data = await getMutationFn()(variables)\n        }\n\n        if (isLatest()) {\n          await onSuccess(data, variables)\n        }\n\n        if (isLatest()) {\n          await config.onSuccess(data, variables)\n        }\n\n        if (isLatest()) {\n          await onSettled(data, null, variables)\n        }\n\n        if (isLatest()) {\n          await config.onSettled(data, null, variables)\n        }\n\n        if (isLatest()) {\n          dispatch({ type: actionResolve, data })\n        }\n\n        return data\n      } catch (error) {\n        if (isLatest()) {\n          Console.error(error)\n          await onError(error, variables, snapshotValue)\n        }\n\n        if (isLatest()) {\n          await config.onError(error, variables, snapshotValue)\n        }\n\n        if (isLatest()) {\n          await onSettled(undefined, error, variables, snapshotValue)\n        }\n\n        if (isLatest()) {\n          await config.onSettled(undefined, error, variables, snapshotValue)\n        }\n\n        if (isLatest()) {\n          dispatch({ type: actionReject, error })\n\n          if (throwOnError ?? config.throwOnError) {\n            throw error\n          }\n        }\n      }\n    },\n    [dispatch, getConfig, getMutationFn]\n  )\n\n  const reset = React.useCallback(() => dispatch({ type: actionReset }), [\n    dispatch,\n  ])\n\n  React.useEffect(() => {\n    if (getConfig().useErrorBoundary && state.error) {\n      throw state.error\n    }\n  }, [getConfig, state.error])\n\n  return [mutate, { ...state, reset }]\n}\n","import React from 'react'\n\n//\n\nimport { useQueryCache } from './queryCache'\nimport { useConfigContext } from './config'\nimport {\n  useUid,\n  isDocumentVisible,\n  Console,\n  useGetLatest,\n  useMountedCallback,\n} from './utils'\n\nexport function useBaseQuery(queryKey, queryVariables, queryFn, config = {}) {\n  const instanceId = useUid()\n\n  config = {\n    ...useConfigContext(),\n    ...config,\n  }\n\n  const queryCache = useQueryCache()\n\n  const queryRef = React.useRef()\n\n  const newQuery = queryCache._buildQuery(\n    queryKey,\n    queryVariables,\n    queryFn,\n    config\n  )\n\n  const useCachedQuery =\n    queryRef.current &&\n    typeof queryRef.current.queryHash === 'undefined' &&\n    typeof newQuery.queryHash === 'undefined'\n\n  // Do not use new query with undefined queryHash, if previous query also had undefined queryHash.\n  // Otherwise this will cause infinite loop.\n  if (!useCachedQuery) {\n    queryRef.current = newQuery\n  }\n\n  const query = queryRef.current\n\n  const [, unsafeRerender] = React.useState()\n\n  const rerender = useMountedCallback(unsafeRerender)\n\n  const getLatestConfig = useGetLatest(config)\n  const refetch = React.useCallback(\n    async ({ throwOnError, ...rest } = {}) => {\n      try {\n        return await query.fetch(rest)\n      } catch (err) {\n        if (throwOnError) {\n          throw err\n        }\n      }\n    },\n    [query]\n  )\n\n  query.suspenseInstance = {\n    onSuccess: data => getLatestConfig().onSuccess(data),\n    onError: err => getLatestConfig().onError(err),\n    onSettled: (data, err) => getLatestConfig().onSettled(data, err),\n  }\n\n  // After mount, subscribe to the query\n  React.useEffect(() => {\n    // Update the instance to the query again, but not as a placeholder\n    query.updateInstance({\n      id: instanceId,\n      onStateUpdate: () => rerender({}),\n      onSuccess: data => getLatestConfig().onSuccess(data),\n      onError: err => getLatestConfig().onError(err),\n      onSettled: (data, err) => getLatestConfig().onSettled(data, err),\n    })\n\n    return query.subscribe(instanceId)\n  }, [getLatestConfig, instanceId, query, rerender])\n\n  React.useEffect(() => {\n    // Perform the initial fetch for this query if necessary\n    if (\n      !getLatestConfig().manual && // Don't auto fetch if config is set to manual query\n      !query.wasPrefetched && // Don't double fetch for prefetched queries\n      !query.wasSuspended && // Don't double fetch for suspense\n      query.state.isStale && // Only refetch if stale\n      (getLatestConfig().refetchOnMount || query.instances.length === 1)\n    ) {\n      refetch().catch(Console.error)\n    }\n\n    query.wasPrefetched = false\n    query.wasSuspended = false\n  }, [getLatestConfig, query, refetch])\n\n  // Handle refetch interval\n  React.useEffect(() => {\n    const query = queryRef.current\n    if (\n      config.refetchInterval &&\n      (!query.currentRefetchInterval ||\n        // shorter interval should override previous one\n        config.refetchInterval < query.currentRefetchInterval)\n    ) {\n      query.currentRefetchInterval = config.refetchInterval\n      clearInterval(query.refetchIntervalId)\n      query.refetchIntervalId = setInterval(() => {\n        if (isDocumentVisible() || config.refetchIntervalInBackground) {\n          refetch().catch(Console.error)\n        }\n      }, config.refetchInterval)\n\n      return () => {\n        clearInterval(query.refetchIntervalId)\n        delete query.refetchIntervalId\n        delete query.currentRefetchInterval\n      }\n    }\n  }, [config.refetchInterval, config.refetchIntervalInBackground, refetch])\n\n  return {\n    ...query.state,\n    config,\n    query,\n    refetch,\n  }\n}\n","import React from 'react'\n\n//\n\nimport { useBaseQuery } from './useBaseQuery'\nimport { getQueryArgs, useGetLatest, handleSuspense } from './utils'\n\nexport function useInfiniteQuery(...args) {\n  const queryInfoRef = React.useRef()\n  let [queryKey, queryVariables, queryFn, config = {}] = getQueryArgs(args)\n\n  const { getFetchMore } = config\n  const getGetFetchMore = useGetLatest(getFetchMore)\n\n  // The default queryFn will query all pages and map them together\n  const originalQueryFn = queryFn\n\n  queryFn = async () => {\n    const data = []\n    const pageVariables = [...queryInfoRef.current.query.pageVariables]\n    const rebuiltPageVariables = []\n\n    do {\n      const args = pageVariables.shift()\n\n      if (!data.length) {\n        // the first page query doesn't need to be rebuilt\n        data.push(await originalQueryFn(...args))\n        rebuiltPageVariables.push(args)\n      } else {\n        // get an up-to-date cursor based on the previous data set\n        const nextCursor = getGetFetchMore()(data[data.length - 1], data)\n\n        // break early if there's no next cursor\n        // otherwise we'll start from the beginning\n        // which will cause unwanted duplication\n        if (!nextCursor) {\n          break\n        }\n\n        const pageArgs = [\n          // remove the last argument (the previously saved cursor)\n          ...args.slice(0, -1),\n          nextCursor,\n        ]\n\n        data.push(await originalQueryFn(...pageArgs))\n        rebuiltPageVariables.push(pageArgs)\n      }\n    } while (pageVariables.length)\n\n    queryInfoRef.current.query.canFetchMore = getGetFetchMore()(\n      data[data.length - 1],\n      data\n    )\n    queryInfoRef.current.query.pageVariables = rebuiltPageVariables\n\n    return data\n  }\n\n  const queryInfo = useBaseQuery(queryKey, queryVariables, queryFn, config)\n\n  if (\n    typeof queryInfo.query.canFetchMore === 'undefined' &&\n    typeof queryInfo.data !== 'undefined'\n  ) {\n    queryInfo.query.canFetchMore = getGetFetchMore()(\n      queryInfo.data[queryInfo.data.length - 1],\n      queryInfo.data\n    )\n  }\n\n  queryInfoRef.current = queryInfo\n\n  let {\n    refetch,\n    data = [],\n    query: { canFetchMore },\n  } = queryInfo\n\n  // Here we seed the pageVariabes for the query\n  if (!queryInfo.query.pageVariables) {\n    queryInfo.query.pageVariables = [\n      [...queryInfo.query.queryKey, ...queryInfo.query.queryVariables],\n    ]\n  }\n\n  const fetchMore = React.useCallback(\n    (fetchMoreInfo = queryInfoRef.current.query.canFetchMore) =>\n      queryInfoRef.current.query.canFetchMore\n        ? refetch({\n            force: true,\n            __queryFn: async (...args) => {\n              try {\n                queryInfoRef.current.query.setState(old => ({\n                  ...old,\n                  isFetchingMore: true,\n                }))\n\n                const newArgs = [...args, fetchMoreInfo]\n                queryInfoRef.current.query.pageVariables.push(newArgs)\n\n                const data = [\n                  ...queryInfoRef.current.data,\n                  await originalQueryFn(...newArgs),\n                ]\n\n                queryInfoRef.current.query.canFetchMore = getGetFetchMore()(\n                  data[data.length - 1],\n                  data\n                )\n\n                return data\n              } finally {\n                queryInfoRef.current.query.setState(old => ({\n                  ...old,\n                  isFetchingMore: false,\n                }))\n              }\n            },\n          })\n        : void 0,\n    [getGetFetchMore, originalQueryFn, refetch]\n  )\n\n  handleSuspense(queryInfo)\n\n  return {\n    ...queryInfo,\n    data,\n    canFetchMore,\n    fetchMore,\n  }\n}\n","import React from 'react'\n\nimport { useQueryCache } from './queryCache'\n\nexport function useIsFetching() {\n  const queryCache = useQueryCache()\n  const [state, setState] = React.useState({})\n\n  React.useEffect(() => {\n    return queryCache.subscribe(() => setState({}))\n  }, [])\n\n  return React.useMemo(() => state && queryCache.isFetching, [state])\n}\n","import React from 'react'\n\n//\n\nimport { useBaseQuery } from './useBaseQuery'\nimport { getQueryArgs, handleSuspense } from './utils'\n\nexport function usePaginatedQuery(...args) {\n  let [queryKey, queryVariables, queryFn, config = {}] = getQueryArgs(args)\n\n  const lastDataRef = React.useRef()\n\n  if (!queryKey) {\n    lastDataRef.current = undefined\n  }\n\n  // If latestData is set, don't use initialData\n  if (typeof lastDataRef.current !== 'undefined') {\n    delete config.initialData\n  }\n\n  const query = useBaseQuery(queryKey, queryVariables, queryFn, config)\n\n  let { data: latestData, status } = query\n\n  React.useEffect(() => {\n    if (status === 'success' && typeof latestData !== 'undefined') {\n      lastDataRef.current = latestData\n    }\n  }, [latestData, status])\n\n  let resolvedData = latestData\n\n  if (typeof resolvedData === 'undefined') {\n    resolvedData = lastDataRef.current\n  }\n\n  if (typeof resolvedData !== 'undefined') {\n    status = 'success'\n  }\n\n  const paginatedQuery = {\n    ...query,\n    resolvedData,\n    latestData,\n    status,\n  }\n\n  handleSuspense(paginatedQuery)\n\n  return paginatedQuery\n}\n","import { useBaseQuery } from './useBaseQuery'\nimport { getQueryArgs, handleSuspense } from './utils'\n\nexport function useQuery(...args) {\n  const query = useBaseQuery(...getQueryArgs(args))\n\n  handleSuspense(query)\n\n  return query\n}\n"],"names":["_Pact","prototype","then","onFulfilled","onRejected","result","state","this","s","callback","_settle","v","e","o","_this","value","pact","bind","observer","_isSettledPact","thenable","_async","f","args","i","arguments","length","Promise","resolve","apply","reject","_await","direct","_awaitIgnored","_empty","_continue","Symbol","iterator","asyncIterator","_do","body","test","awaitBody","shouldContinue","_resumeAfterBody","_resumeAfterTest","_invoke","_invokeIgnored","_catch","recover","_finallyRethrows","finalizer","_rethrow","thrown","_uid","uid","cancelledError","isServer","window","noop","Console","console","error","warn","log","useGetLatest","obj","ref","React","useRef","current","useCallback","functionalUpdate","updater","old","stableStringifyReplacer","_","isObject","Object","assign","keys","sort","map","key","stableStringify","JSON","stringify","a","Array","isArray","deepIncludes","b","some","isDocumentVisible","document","undefined","visibilityState","getQueryArgs","hasOwnProperty","queryKey","variables","queryFn","config","Error","useMountedCallback","mounted","handleSuspense","queryInfo","suspense","useErrorBoundary","status","setTimeout","query","wasSuspended","refetch","configContext","createContext","DEFAULTS","retry","retryDelay","attemptIndex","Math","min","staleTime","cacheTime","refetchAllOnWindowFocus","refetchInterval","queryKeySerializerFn","defaultQueryKeySerializerFn","queryHash","parse","queryFnParamsFilter","d","throwOnError","onMutate","onSuccess","onError","onSettled","refetchOnMount","isDataEqual","deepEqual","valueOf","call","defaultConfigRef","useConfigContext","useContext","queryCache","makeQueryCache","queryCacheContext","queryCaches","useQueryCache","actionInit","actionFailed","actionMarkStale","actionMarkGC","actionFetch","actionSuccess","actionError","actionSetState","listeners","cache","queries","isFetching","notifyGlobalListeners","values","reduce","acc","forEach","subscribe","cb","push","splice","indexOf","clear","findQueries","predicate","exact","filter","getQueries","getQuery","getQueryData","_cache$getQuery","data","removeQueries","foundQueries","clearTimeout","staleTimeout","cancelQueries","cancel","refetchQueries","force","all","fetch","err","_buildQuery","userQueryKey","queryVariables","options","reducer","queryReducer","defaultQueryReducer","noQueryHash","initialData","hasInitialData","isStale","manual","instances","type","initialStatus","dispatch","action","onStateUpdate","scheduleStaleTimeout","Infinity","scheduleGarbageCollection","cacheTimeout","markedForGarbageCollection","heal","cancelled","cancelPromises","promise","updateInstance","instance","found","find","id","instanceId","tryFetchData","failureCount","shouldContinueRetryOnFocus","delay","__queryFn","callbackInstances","unshift","suspenseInstance","setData","setState","makeQuery","prefetchQuery","res","wasPrefetched","setQueryData","canFetchMore","updatedAt","Date","now","removePreviousHandler","onWindowFocus","navigator","onLine","refetchOnWindowFocus","catch","setFocusHandler","handleFocus","_window","addEventListener","removeEventListener","getDefaultState","actionReset","actionLoading","actionResolve","actionReject","mutationReducer","useBaseQuery","queryRef","newQuery","rerender","useState","getLatestConfig","rest","useEffect","currentRefetchInterval","clearInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","children","useMemo","Provider","configContextValue","newConfig","c","queryInfoRef","getFetchMore","getGetFetchMore","originalQueryFn","pageVariables","rebuiltPageVariables","shift","nextCursor","pageArgs","slice","fetchMore","fetchMoreInfo","isFetchingMore","newArgs","mutationFn","useReducer","getMutationFn","getConfig","latestMutationRef","mutate","mutationId","snapshotValue","isLatest","reset","lastDataRef","latestData","resolvedData","paginatedQuery"],"mappings":"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"}